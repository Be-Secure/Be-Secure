{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"index.html","text":"","title":"Home"},{"location":"assessment.html","text":"Be-Secure seven stage security assessment This section describes the seven stages of Be-Secure CE security assessment to enhance the security posture of open source projects / open source tech stacks. Once we receive a request from the community member / user of Be-Secure project to assess an open source tech stack, we will fork the respective open source project into Be-Secure namespace. Then we will commence with our seven stage security assessment as listed below - First stage: Identification of the blueprint for BeSman environment using the details on the open source tech stack that has been shared. Second stage: If a suitable blueprint doesn\u2019t exist, build a new BeSman environment. This will be the base environment to perform development activities for the shared open source tech stack. Third stage: Build the security testing environment/sandbox that can be utilized for conducting security testing for the specific open source tech stack. Fourth stage: Conduct security assessment and identify the vulnerabilities in it. This vulnerability information will be published. Fifth stage: Identify and develop security patches for the identified vulnerabilities. Sixth stage: Upgrade the respective BeSman environments with the confirmed new security patches to strengthen their security posture. Publish the upgraded BeSman environments for active consumption Seventh stage: For an existing BeSman environment, the focus is on identifying the latest security vulnerabilities and mapping it to the respective environment. This is a continuous activity that is focused on enhancing the security posture of BeSman environments to address the latest identified vulnerabilities.","title":"Security Assessment"},{"location":"bes-app-tech-stack.html","text":"Application [A] Tech Stack This security stack focuses on all open source applications and how they can be secured. Drupal Sl.No BeSman Env name Dependencies Entities Prebundled in besman Env 01 bes-drupaldev-env TBD 02 bes-drupalsec-env TBD, bes-appsastsec-env, bes-appdastsec-env, bes-pensec-env Odoo Sl.No BeSman Env name Dependencies Entities Prebundled in besman Env 01 bes-odoodev-env TBD 02 bes-odoosec-env TBD, bes-appsastsec-env, bes-appdastsec-env, bes-pensec-env","title":"A Tech Stack"},{"location":"bes-besman-details.html","text":"One of the first utilities to be created as part of the Be-Secure project is BeSman. BeSman is a command-line utility to provision customized environments for each open source tech stack. These environments are known as BeSman environments. We have two types of BeSman environments \u2013 dev and sec environments. The development environment is pre-bundled with all tools and dependencies that a developer would need to work on a specific open source project. Similarly, the sec environments are pre-bundled with a set of open source security tools that a security tester can leverage to conduct planned security assessment. Why do we need BeSman utility Individuals spend considerable effort to set up and configure the open source project in their local environment to evaluate it / commence working on it. At times individuals run into configuration issues or set up issues which result in them spending more effort to resolve them. This is a sizeable effort that is spent just to get the environment up as compared to the effort spent to build newer capability using an existing open source project. This is a misspend effort that should be managed in a better way. The BeSman utility provides command-line capability to provision customized environments quickly and in a consistent manner. How can BeSman utility help BeSman environments are pre-bundled with tools and dependencies for a specific open project and it can be provisioned using simple bash shell commands from BeSman utility. BeSman utility will also provide configurable capabilities that would permit the user to configure the tools and dependencies to be pre-bundled in the environment. Individuals will have complete control over what goes into building and provisioning the environment. The base BeSman environment can be customized further to address specific project needs. This gives a lot of flexibility to the developer/security tester to optimize their work environment in a seamless manner. Getting started guide Installing BeSman using oah-shell We will be using oah-installer , a component of OpenAppHack(OAH) , to install oah-shell in the local system and using it to bring up oah-bes-vm with BeSman installed. Pre-requisites Virtual Box Vagrant Ansible Installation Open your terminal Install oah-shell curl -L https://raw.githubusercontent.com/Be-secure/oah-installer/master/install.sh | bash Confirm the installation oah-shell by executing the below command which would list various oah commands oah Execute the below command to get the list of environments oah list Note: Make sure oah-bes-vm is listed. If not, execute step 2 and run the below command source ${OAH_DIR}/bin/oah-init Setup oah-bes-vm for BeSman by executing the below command. oah install -v oah-bes-vm Testing Install an environment bes install -env [environment_name] -V [version] Run the below command to get the list of available enviornments bes list Uninstall an environment bes uninstall -env [environment_name] -V [version] Demo BeSman Demo","title":"BeSman"},{"location":"bes-besman-details.html#getting-started-guide","text":"Installing BeSman using oah-shell We will be using oah-installer , a component of OpenAppHack(OAH) , to install oah-shell in the local system and using it to bring up oah-bes-vm with BeSman installed. Pre-requisites Virtual Box Vagrant Ansible Installation Open your terminal Install oah-shell curl -L https://raw.githubusercontent.com/Be-secure/oah-installer/master/install.sh | bash Confirm the installation oah-shell by executing the below command which would list various oah commands oah Execute the below command to get the list of environments oah list Note: Make sure oah-bes-vm is listed. If not, execute step 2 and run the below command source ${OAH_DIR}/bin/oah-init Setup oah-bes-vm for BeSman by executing the below command. oah install -v oah-bes-vm Testing Install an environment bes install -env [environment_name] -V [version] Run the below command to get the list of available enviornments bes list Uninstall an environment bes uninstall -env [environment_name] -V [version] Demo BeSman Demo","title":"Getting started guide"},{"location":"bes-community-dashboard.html","text":"","title":"Community Dashboard"},{"location":"bes-contribution.html","text":"We love your input! We want to make contributing to this project as easy and transparent as possible, whether it's: Reporting a bug Discussing the current state of the code Proposing new features Becoming a maintainer We Develop with Github We use github to host code, to track issues and feature requests, as well as accept pull requests. We Use Github Flow , So All Code Changes Happen Through Pull Requests Pull requests are the best way to propose changes to the codebase (we use Github Flow ). We actively welcome your pull requests: Fork the repo and create your branch from master . If you've added code that should be tested, add tests. Ensure the test suite passes. Make sure your code lints. Issue that pull request! Report bugs using Github's issues We use GitHub issues to track public bugs. Report a bug by opening a new issue ; it's that easy! Great Bug Reports tend to have: A quick summary and/or background Steps to reproduce Be specific! Give sample code snapshots if you can. What you expected would happen What actually happens Notes (possibly including why you think this might be happening, or stuff you tried that didn't work) People love thorough bug reports. Processes expected to follow by each contributors: Process for pull request Process for issues Use a Consistent Coding Style You must follow the coding standard described in the Be-Secure review Checklist . Developers View Please refer to the following link to know more about BeSman. It is built using bash and can be easily customized to provision new environments for an open source tech stack based on open source project requirements. Anyone can leverage BeSman utility to build customized environments for their projects. You can set up BeSman utility by following the steps mentioned in the Readme file. You can raise an issue once you encounter any issue with using available Besman environment scripts or using BeSman utility, we will be glad to help address the issue for you. If you are interested in resolving identified issues with the known list of BeSman environments or BeSman utility, you can raise a pull request with the required fixes. We value your contributions.","title":"How to Contribute"},{"location":"bes-contribution.html#we-develop-with-github","text":"We use github to host code, to track issues and feature requests, as well as accept pull requests. We Use Github Flow , So All Code Changes Happen Through Pull Requests Pull requests are the best way to propose changes to the codebase (we use Github Flow ). We actively welcome your pull requests: Fork the repo and create your branch from master . If you've added code that should be tested, add tests. Ensure the test suite passes. Make sure your code lints. Issue that pull request!","title":"We Develop with Github"},{"location":"bes-contribution.html#report-bugs-using-githubs-issues","text":"We use GitHub issues to track public bugs. Report a bug by opening a new issue ; it's that easy! Great Bug Reports tend to have: A quick summary and/or background Steps to reproduce Be specific! Give sample code snapshots if you can. What you expected would happen What actually happens Notes (possibly including why you think this might be happening, or stuff you tried that didn't work) People love thorough bug reports.","title":"Report bugs using Github's issues"},{"location":"bes-contribution.html#processes-expected-to-follow-by-each-contributors","text":"Process for pull request Process for issues","title":"Processes expected to follow by each contributors:"},{"location":"bes-contribution.html#use-a-consistent-coding-style","text":"You must follow the coding standard described in the Be-Secure review Checklist .","title":"Use a Consistent Coding Style"},{"location":"bes-contribution.html#developers-view","text":"Please refer to the following link to know more about BeSman. It is built using bash and can be easily customized to provision new environments for an open source tech stack based on open source project requirements. Anyone can leverage BeSman utility to build customized environments for their projects. You can set up BeSman utility by following the steps mentioned in the Readme file. You can raise an issue once you encounter any issue with using available Besman environment scripts or using BeSman utility, we will be glad to help address the issue for you. If you are interested in resolving identified issues with the known list of BeSman environments or BeSman utility, you can raise a pull request with the required fixes. We value your contributions.","title":"Developers View"},{"location":"bes-devops-tech-stack.html","text":"DevOps [DO] Tech Stack This security stack focuses on all kinds of open source tools used in DevOps and how they can be secured both in terms of it source code and its implementation. This would enable users to implement DevSecOps using secured DevOps tools. The identified DevOps tools will be assessed for security vulnerabilities and remediated. Ansible Sl.No BeSman Env name Dependencies Entities Prebundled in besman Env 01 bes-ansibledev-env Python, Ruby, bash, ansible-galaxy Git, Python, Pypi, VScode, Jenkin, Ansible-galaxy 02 bes-ansiblesec-env Java, Jenkin, bes-appsastsec-env, Python, Pypi Chef Sl.No BeSman Env name Dependencies Entities Prebundled in besman Env 01 bes-chefdev-env Ruby (client) and Ruby / Erlang (server) Git, RVM, Ruby, Erlang, VSCode, ChefSpec, Jenkin 02 bes-chefsec-env Git, RVM, bes-appsastsec-env, bes-appdastsec-env","title":"DO tech stack"},{"location":"bes-dist-decent-tech-stack.html","text":"Distributed & Decentralized Application [DA] Tech Stack This security stack focuses on all open source based distributed applications and blockchain frameworks. Majority of blockchain frameworks are open source in nature. Hyperledger Indy Sl.No BeSman Env name Dependencies Entities Prebundled in besman Env 01 bes-hyperledgerIndydev-env Git, Python, Pypi, VSCode, Indy-node, Indy-sdk, crypto, Jenkins 02 bes-hyperledgerIndysec-env TBD, bes-appsastsec-env, bes-appdastsec-env, bes-pensec-env, Git Hyperledger Fabric Sl.No BeSman Env name Dependencies Entities Prebundled in besman Env 01 bes-hyperledgerFabricdev-env Git, Go, NPM, Docker, NodeJS, Jnekins, Docker compose, VSCode 02 bes-hyperledgerFabricsec-env Git, Go, bes-appsastsec-env, bes-appdastsec-env, NPM, Docker","title":"DA Tech Stack"},{"location":"bes-faq.html","text":"How can I contribute to Be-Secure Projects? If you are interested to know more or want to contribute, we would love to hear from you. Please see our detailed documentation related to the Be-Secure project. How do I raise issues? All reference stack codebases and documentation are in GitHub Be-Secure . You can raise them as issues against each repository. Thank you for helping us making the reference stack better. Please make sure that you had followed the proper issue template while raising issues. How do I raise pull requests? You can make this project attractive and feature-rich using your pull requests. Please find the guideline to raise pull request here How do I raise a request to provision a new BeSman environment for a particular open source tech stack? TBD","title":"FAQ"},{"location":"bes-faq.html#how-can-i-contribute-to-be-secure-projects","text":"If you are interested to know more or want to contribute, we would love to hear from you. Please see our detailed documentation related to the Be-Secure project.","title":"How can I contribute to Be-Secure Projects?"},{"location":"bes-faq.html#how-do-i-raise-issues","text":"All reference stack codebases and documentation are in GitHub Be-Secure . You can raise them as issues against each repository. Thank you for helping us making the reference stack better. Please make sure that you had followed the proper issue template while raising issues.","title":"How do I raise issues?"},{"location":"bes-faq.html#how-do-i-raise-pull-requests","text":"You can make this project attractive and feature-rich using your pull requests. Please find the guideline to raise pull request here","title":"How do I raise pull requests?"},{"location":"bes-faq.html#how-do-i-raise-a-request-to-provision-a-new-besman-environment-for-a-particular-open-source-tech-stack","text":"TBD","title":"How do I raise a request to provision a new BeSman environment for a particular open source tech stack?"},{"location":"bes-getting-started.html","text":"Getting started Security for open source projects is of prime importance for us. We have identified different open source security tech stacks \u2013 grouping various open source technologies under each of these identified open source security tech stack. Please feel free to check out more about the open source security tech stack by visiting the following section in our website BeS tech stacks Creation of open source security tech stack is the first stage in our pursuit for open source security. As the next stage we have created the BeSman utility \u2013 it is a command-line utility that will enable users to install project environments based on their project needs in a seamless manner without putting much constraint on their available infrastructure. BeSman environments comprise of dev and security testing environments for each identified open source security tech stack. These environments can be customized per project needs and this is the flexibility we would like to share with you. Please refer the following to know more BeSman utility and various environments that can be provisioned View various environments In case you are not able to identify a suitable BeSman environment for your project, please visit the following section to understand how to raise a request for a new environment. Once you have identified the required BeSman environments, you can access the same from the following GitHub repository. You can use the BeSman environments to set up your development environment or to conduct security testing for your project. The security environments are pre-bundled with open source security tools to help conduct security testing of your projects. You can share your feedback after using the available BeSman environments. This would help us to refine it further. We are happy to help you with the customization on the selected BeSman environments thus enabling you to use these environments with ease. We also have enabled a Be-Secure Community Dashboard. Please click here to view the dashboard. The dashboard will enable everyone to view the security posture of identified open source projects we track as part of Be-Secure community initiative. We track these projects to keep a tab on their security posture and help the respective contributors to enhance the security posture of their projects. This list will grow as we move forward. Your projects can be one among the many open source projects we track. In case you would like us to track your project, please do visit the section \u2013 Onboarding Apart from tracking various open source projects, we as a community also contribute to a no of open source projects. To know more about this, please visit the following section . If you are interested to contribute in the Be-Secure community initiative, there are ample opportunities for you to contribute. Please have a look at our contribution part.","title":"Getting Started..."},{"location":"bes-lang-framework-tech-stack.html","text":"Language & framework [L&F] Tech Stack This security stack focuses on all open source programming languages and its associated frameworks that are used to build various applications. These programming languages will be assessed and their vulnerabilities remediated. Python-Django Sl.No BeSman Env name Dependencies Entities Prebundled in besman Env 01 bes-pythonDjangodev-env Git, Python, VSCode, pytest, jenkins 02 bes-pythonDjangosec-env Git, bes-appsastsec-env, bes-pensec-env, Pypi, Python Java-Spring Sl.No BeSman Env name Dependencies Entities Prebundled in besman Env 01 bes-javaSpringdev-env Git, openJDK, Apache Maven, Junit, Selenium, Jenkins 02 bes-javaSpringsec-env Git, openJDK, bes-appsastsec-env, bes-pensec-env,","title":"L%F Tech Stack"},{"location":"bes-license.html","text":"Be-Secure Project is Apache 2.0 licensed. In short, when you submit code changes, your submissions are understood to be under the same Apache License 2.0 that covers the project. Feel free to contact the maintainers if that is a concern. By contributing, please ensure that you accept the Developer\u2019s Certificate Origin that will be available as part of your pull request.","title":"Licence"},{"location":"bes-open-source-security-tool-tech-stack.html","text":"Open Source Security Tools [S] Tech Stack This security stack focuses on all open source security tools and to secure these tools for utilization. Application Security Testing (SAST ) Sl.No BeSman Env name Dependencies Entities Prebundled in besman Env 01 bes-appsastsec-env SAST-LGTM, Sonarqube, Semgrep, Gosec, OpenVAS, Vega, Grabber Application Security Testing (DAST) Sl.No BeSman Env name Dependencies Entities Prebundled in besman Env 01 bes-pensec-env DAST - ZAP, GoLismero, Metasploit, Burp Suite CE Penetration Testing Sl.No BeSman Env name Dependencies Entities Prebundled in besman Env 01 bes-pensec-env Kali Linux, Parrot Sec","title":"S Tech Stack"},{"location":"bes-oss-project-we-contribute-to.html","text":"","title":"OSS project we contribute"},{"location":"bes_introduction.html","text":"Be-Secure Its an umbrella of open source security projects, utilities tracker and maintained by the Be-Secure community. Vision We envision a future where the Be-Secure community becomes the one-stop for all open source security tools and technologies that interoperate without the need for customized integrations with security handled proactively. Mission Establish a community of open source security specialist through Be-Secure community initiative Why Be-Secure Today open source software is an integral part of the technology landscape in many organizations. Their adoption rate is increasing year on year. The benefits from open source are multi-fold and it is the way forward to develop capabilities through collaboration with open source community projects. This approach necessitates the focus on security for open source projects. Be-Secure projects focus on addressing common security requirements of open source projects. Be-Secure is for Organizations, open source developers, security researchers, auditors and regulators \u2013 all can benefit from Be-Secure TAVOSS TAVOSS is Trusted And Verified Open Source Software that has undergone a security assessment by the Be-Secure community. Benefits from Be-Secure Developers can easily learn secure development practices and are proactively guided by Be-Secure security environments to apply those practices and automatically informed when action is needed to prevent, remediate, or mitigate security issues. Developers, auditors, and regulators can create new Be-Secure security environments and easily distribute security policies that are enforced through tooling and automation, providing continuous assurance of the results. Security assessment environments aid developers and researchers to identify security issues, like unintentional vulnerabilities and have this information swiftly flow - backward through the supply chain to someone who can rapidly address the issue. Be-Secure Community members can provide information and notifications about product defects, mitigations, quality, and supportability and have this information rapidly flow forward across the ecosystem system to all users, and users can rapidly update their software or implement mitigations as appropriate. Getting Started","title":"About"},{"location":"checklist.html","text":"Sl.No Checkpoints A Naming Convention A.1 All Command files will have a prefix besman-XXXX.sh and XXXX must be the command name A.2 All Environment files will have a prefix besman-XXXXX.sh and XXXXX must be the environment name A.3 All Internal besman functions that will be called in other bes scripts must begin with __bes A.4 All function names should have meaningful names which denote what they are intended to do A.5 All besman environment scripts should have standard set of functions included in them and follow the following naming convention __bes_XXXX_YYYY() function where XXXX is the corresponding command and YYYY is the environment name For example, if the environment name is \"yyyy\", then the corresponding commands would look like:- __besman_install_yyyy() __besman_uninstall_yyyy() __besman_update_yyyy() __besman_upgrade_yyyy() __besman_validate_yyyy() __besman_start_yyyy() __besman_stop_yyyy() B Variable definition & Scoping B.1 All environment variables should be in caps (eg besman_VERSION) B.2 All export variables used in a script should be initiatlized in besman-init.sh B.3 The environment variables should be invoked using export (in the beginning of the script) if they are intended to be used as is in the script B.4 All local variables should be in small letters (eg argument(1)) B.5 The scope of local variables newly introduced should be confined to the functions they are defined in or within the script they have been defined B.6 Any variable defined in a script which is to be reused in another script should be defined as Environment Variable C Function Usage C.1 __besman_echo function should be used instead of echo to display messages in the script C.2 __besman_echo_debug function should be used to display specific error message in the script C.3 Functions to return -1 if they encounter any error during execution or don't satisfy the condition being validated or processed C.4 Return code from function execution other than 0 to be processed for exiting from script D Test Scripts D.1 All command scripts should have their correspondiing test scripts available for verification purpose and be made available along with code changes during code submission D.2 All environment scripts should have their corresponding test scripts available for verification purpose and be made available along with code changes during code submission D.3 All test scripts should have the following standard set of functions included in them :\u2013 test_bes_init() test_bes_execute() test_bes_validate() test_bes_cleanup() __ test_bes_run() E Raising Pull Request E.1 Pull request should be raised only after the code has been tested in the local environment by the developer, code reviewed & feedback comments closed by the developer E.2 Code reviewers should raise pull request against the developer's repository to share feedback comments E.3 Proper comments should be given explaining the changes in the code at a high level while raising the pull request E.4 Verify if code can be optimized further - * Remove indented if else loops with appropriate case statements * Group lines of code into a function (if they are intended to achieve a specific objective) * Reuse of existing defined functions than creating newer functions","title":"Checklist"},{"location":"contribute.html","text":"We love your input! We want to make contributing to this project as easy and transparent as possible, whether it's: Reporting a bug Discussing the current state of the code Proposing new features Becoming a maintainer We Develop with Github We use github to host code, to track issues and feature requests, as well as accept pull requests. We Use Github Flow , So All Code Changes Happen Through Pull Requests Pull requests are the best way to propose changes to the codebase (we use Github Flow ). We actively welcome your pull requests: Fork the repo and create your branch from master . If you've added code that should be tested, add tests. Ensure the test suite passes. Make sure your code lints. Issue that pull request! Report bugs using Github's issues We use GitHub issues to track public bugs. Report a bug by opening a new issue ; it's that easy! Great Bug Reports tend to have: A quick summary and/or background Steps to reproduce Be specific! Give sample code snapshots if you can. What you expected would happen What actually happens Notes (possibly including why you think this might be happening, or stuff you tried that didn't work) People love thorough bug reports. Processes expected to follow by each contributors: Process for pull request Process for issues Use a Consistent Coding Style You must follow the coding standard described in the Be-Secure review Checklist . Developers View Please refer to the following link to know more about BeSman. It is built using bash and can be easily customized to provision new environments for an open source tech stack based on open source project requirements. Anyone can leverage BeSman utility to build customized environments for their projects. You can set up BeSman utility by following the steps mentioned in the Readme file. You can raise an issue once you encounter any issue with using available Besman environment scripts or using BeSman utility, we will be glad to help address the issue for you. If you are interested in resolving identified issues with the known list of BeSman environments or BeSman utility, you can raise a pull request with the required fixes. We value your contributions. License Be-Secure Project is Apache 2.0 licensed. In short, when you submit code changes, your submissions are understood to be under the same Apache License 2.0 that covers the project. Feel free to contact the maintainers if that is a concern. By contributing, please ensure that you accept the Developer\u2019s Certificate Origin that will be available as part of your pull request. FAQs Click here for FAQs","title":"Contribute"},{"location":"contribute.html#we-develop-with-github","text":"We use github to host code, to track issues and feature requests, as well as accept pull requests. We Use Github Flow , So All Code Changes Happen Through Pull Requests Pull requests are the best way to propose changes to the codebase (we use Github Flow ). We actively welcome your pull requests: Fork the repo and create your branch from master . If you've added code that should be tested, add tests. Ensure the test suite passes. Make sure your code lints. Issue that pull request!","title":"We Develop with Github"},{"location":"contribute.html#report-bugs-using-githubs-issues","text":"We use GitHub issues to track public bugs. Report a bug by opening a new issue ; it's that easy! Great Bug Reports tend to have: A quick summary and/or background Steps to reproduce Be specific! Give sample code snapshots if you can. What you expected would happen What actually happens Notes (possibly including why you think this might be happening, or stuff you tried that didn't work) People love thorough bug reports.","title":"Report bugs using Github's issues"},{"location":"contribute.html#processes-expected-to-follow-by-each-contributors","text":"Process for pull request Process for issues","title":"Processes expected to follow by each contributors:"},{"location":"contribute.html#use-a-consistent-coding-style","text":"You must follow the coding standard described in the Be-Secure review Checklist .","title":"Use a Consistent Coding Style"},{"location":"contribute.html#developers-view","text":"Please refer to the following link to know more about BeSman. It is built using bash and can be easily customized to provision new environments for an open source tech stack based on open source project requirements. Anyone can leverage BeSman utility to build customized environments for their projects. You can set up BeSman utility by following the steps mentioned in the Readme file. You can raise an issue once you encounter any issue with using available Besman environment scripts or using BeSman utility, we will be glad to help address the issue for you. If you are interested in resolving identified issues with the known list of BeSman environments or BeSman utility, you can raise a pull request with the required fixes. We value your contributions.","title":"Developers View"},{"location":"contribute.html#license","text":"Be-Secure Project is Apache 2.0 licensed. In short, when you submit code changes, your submissions are understood to be under the same Apache License 2.0 that covers the project. Feel free to contact the maintainers if that is a concern. By contributing, please ensure that you accept the Developer\u2019s Certificate Origin that will be available as part of your pull request.","title":"License"},{"location":"contribute.html#faqs","text":"Click here for FAQs","title":"FAQs"},{"location":"issue_template.html","text":"Issue Template We regret for the issue that you are facing, Thanks for helping us by raising an issue so that we can improve ourself to do the best. Mark one of the issues given below with respect to the issue you are facing with: [ ] Issue facing with installation or setup of BeSman utility. [ ] Issue facing while running an environment. [ ] Issue facing while adding a new environment or new file. [ ] Other issues: please provide the issue in the comment box Please explain the Issue / Feature Request here: Please provide the necessary screenshots or documents regarding the issue:","title":"Issue template"},{"location":"issue_template.html#issue-template","text":"We regret for the issue that you are facing, Thanks for helping us by raising an issue so that we can improve ourself to do the best. Mark one of the issues given below with respect to the issue you are facing with: [ ] Issue facing with installation or setup of BeSman utility. [ ] Issue facing while running an environment. [ ] Issue facing while adding a new environment or new file. [ ] Other issues: please provide the issue in the comment box Please explain the Issue / Feature Request here: Please provide the necessary screenshots or documents regarding the issue:","title":"Issue Template"},{"location":"our_oss_project.html","text":"BeSman BeSman is a command-line utility to provision customized environments for each open source tech stack. LEARN MORE >> oah-bes-vm This project is for an easy local deployment of Be-Secure environments. LEARN MORE >> BeSlighthouse Its a community dashboard for TAVOSS Components that are security assessed by the Be-Secure community. LEARN MORE >>","title":"Our OSS projects"},{"location":"our_oss_project.html#besman","text":"BeSman is a command-line utility to provision customized environments for each open source tech stack. LEARN MORE >>","title":"BeSman"},{"location":"our_oss_project.html#oah-bes-vm","text":"This project is for an easy local deployment of Be-Secure environments. LEARN MORE >>","title":"oah-bes-vm"},{"location":"our_oss_project.html#beslighthouse","text":"Its a community dashboard for TAVOSS Components that are security assessed by the Be-Secure community. LEARN MORE >>","title":"BeSlighthouse"},{"location":"projects_we_track.html","text":"As part of the Be-Secure project, the community will be tracking the following projects \u2013 Hyperledger Fabric Blockchain solutions | DA Hyperledger Fabric delivers a uniquely elastic and extensible architecture, distinguishing it from alternative blockchain solutions. Planning for the future of enterprise blockchain requires building on top of a fully-vetted, open source architecture; Hyperledger Fabric is your starting point. This project is an Active Hyperledger project. Hyperledger Fabric is a platform for distributed ledger solutions, underpinned by a modular architecture delivering high degrees of confidentiality, resiliency, flexibility and scalability. It is designed to support pluggable implementations of different components, and accommodate the complexity and intricacies that exist across the economic ecosystem. LEARN MORE >> Hyperledger Indy Blockchain solutions | DA This is the official SDK for Hyperledger Indy, which provides a distributed-ledger-based foundation for self-sovereign identity. Indy provides a software ecosystem for private, secure, and powerful identity, and the Indy SDK enables clients for it. The major artifact of the SDK is a C-callable library; there are also convenience wrappers for various programming languages and Indy CLI tool. All bugs, stories, and backlog for this project are managed through Hyperledger's Jira in project IS (note that regular Indy tickets are in the INDY project instead.) LEARN MORE >> Hyperledger BESU Blockchain solutions | DA Besu is an Apache 2.0 licensed, MainNet compatible, Ethereum client written in Java. LEARN MORE >> Hyperledger Sawtooth Blockchain solutions | DA Hyperledger Sawtooth is an enterprise solution for building, deploying, and running distributed ledgers (also called blockchains). It provides an extremely modular and flexible platform for implementing transaction-based updates to shared state between untrusted parties coordinated by consensus algorithms. LEARN MORE >> Hyperledger BURROW Blockchain solutions | DA Hyperledger Burrow is a permissioned Ethereum smart-contract blockchain node. It executes Ethereum EVM and WASM smart contract code (usually written in Solidity) on a permissioned virtual machine. Burrow provides transaction finality and high transaction throughput on a proof-of-stake Tendermint consensus engine. LEARN MORE >> Hyperledger IROHA Blockchain solutions | DA Iroha is a straightforward distributed ledger technology (DLT), inspired by Japanese Kaizen principle \u2014 eliminate excessiveness (muri). Iroha has essential functionality for your asset, information and identity management needs, at the same time being an efficient and trustworthy crash fault-tolerant tool for your enterprise needs. LEARN MORE >> Hyperledger ARIES Blockchain solutions | DA Hyperledger Aries allows trusted online peer-to-peer interactions based on decentralized identities and verifiable credentials. Aries includes a protocol definition, tools, and reference implementations. The Aries protocol supports identities rooted in a variety of distributed ledgers or blockchains. This approach to identity is often called Self Soverign Identity (SSI). LEARN MORE >> Hyperledger CACTUS Blockchain solutions | DA Hyperledger Cactus aims to provide Decentralized, Secure and Adaptable Integration between Blockchain Networks. Hyperledger Cactus is currently undergoing a major refactoring effort to enable the desired to-be architecture which will enable plug-in based collaborative development to increase the breadth of use cases & Ledgers supported. LEARN MORE >> Hyperledger CELLO Blockchain solutions | DA Hyperledger Cello is a blockchain provision and operation system, which helps manage blockchain networks in an efficient way. LEARN MORE >> Hyperledger CALIPER Blockchain solutions | DA Caliper is a blockchain performance benchmark framework, which allows users to test different blockchain solutions with predefined use cases, and get a set of performance test results. LEARN MORE >> DefectDojo Vulnerability management tool | S DefectDojo is a security program and vulnerability management tool. DefectDojo allows you to manage your application security program, maintain product and application information, triage vulnerabilities and push findings into defect trackers. LEARN MORE >> OWASP Zed Attack Proxy security tool | S The OWASP Zed Attack Proxy (ZAP) is one of the world\u2019s most popular free security tools and is actively maintained by a dedicated international team of volunteers. It can help you automatically find security vulnerabilities in your web applications while you are developing and testing your applications. It's also a great tool for experienced pentesters to use for manual security testing LEARN MORE >> BeEF Browser Exploitation Framework | S BeEF is short for The Browser Exploitation Framework. It is a penetration testing tool that focuses on the web browser. LEARN MORE >> OpenDXL Ontology Interoperable cybersecurity messaging | S The OpenDXL Ontology project is focused on the development of an open and interoperable cybersecurity messaging format for use with the OpenDXL messaging bus. LEARN MORE >> CS-Suite AWS infrastructure auditing tool | S CS Suite is a one stop tool for auditing the security posture of the AWS infrastructure and does system audits as well. CS Suite leverages current open source tools capabilities and has other missing checks added into one tool to rule them all. LEARN MORE >> STIX-shifter Python library | S STIX-shifter is an open source python library allowing software to connect to products that house data repositories by using STIX Patterning, and return results as STIX Observations LEARN MORE >> openscap SCAP document scanner | S The oscap program is a command line tool that allows users to load, scan, validate, edit, and export SCAP documents. LEARN MORE >> fuzzbench Fuzzing research evaluator | S FuzzBench is a free service that evaluates fuzzers on a wide variety of real-world benchmarks, at Google scale. The goal of FuzzBench is to make it painless to rigorously evaluate fuzzing research and make fuzzing research easier for the community to adopt. LEARN MORE >> ghidra Software reverse engineering (SRE) framework | S Ghidra is a software reverse engineering (SRE) framework created and maintained by the National Security Agency Research Directorate. This framework includes a suite of full-featured, high-end software analysis tools that enable users to analyze compiled code on a variety of platforms including Windows, macOS, and Linux. Capabilities include disassembly, assembly, decompilation, graphing, and scripting, along with hundreds of other features. LEARN MORE >> differential-privacy Repository tool | S This repository contains libraries to generate \u03b5- and (\u03b5, \u03b4)-differentially private statistics over datasets LEARN MORE >> Syncope Digital identity manager | S Apache Syncope is an Open Source system for managing digital identities in enterprise environments, implemented in Java EE technology and released under Apache 2.0 license. LEARN MORE >> pritunl-zero Authentication system | S Pritunl-Zero is a zero trust system that provides secure authenticated access to internal services from untrusted networks without the use of a VPN. LEARN MORE >> Pacu AWS exploitation framework | S Pacu is an open-source AWS exploitation framework, designed for offensive security testing against cloud environments. Created and maintained by Rhino Security Labs, Pacu allows penetration testers to exploit configuration flaws within an AWS account, using modules to easily expand its functionality. LEARN MORE >> Nmap Network scanner | S Nmap is released under a custom license, which is based on (but not compatible with) GPLv2. The Nmap license allows free usage by end users, and we also offer a commercial license for companies that wish to redistribute Nmap technology with their products. LEARN MORE >> TRASA Access control | S TRASA is a unified access control platform with identity-aware access proxy, privileged access management, two-factor authentication, device trust, and access policy features that enable secure remote access to Web, SSH, RDP, and Database services LEARN MORE >> Kestrel Web server | A Kestrel threat hunting language provides an abstraction for threat hunters to focus on what to hunt instead of how to hunt. The abstraction makes it possible to codify resuable hunting knowledge in a composable and sharable manner. LEARN MORE >> Snort Intrusion Prevention System | S Snort 3 is the next generation Snort IPS (Intrusion Prevention System). This file will show you what Snort++ has to offer and guide you through the steps from download to demo LEARN MORE >> CSET Security Evaluation Tool | S The Cyber Security Evaluation Tool (CSET\u00ae) is a Department of Homeland Security (DHS) product that assists organizations in protecting their key national cyber assets. It was developed by cybersecurity experts under the direction of CISA. The tool provides users with a systematic and repeatable approach to assessing the security posture of their cyber systems and networks LEARN MORE >> Malcolm Network analyzer | S Malcolm is a powerful network traffic analysis tool suite LEARN MORE >> CTI Repository tool | S This repository contains the MITRE ATT&CK\u00ae and CAPEC\u2122 datasets expressed in STIX 2.0. See USAGE or USAGE-CAPEC for information on using this content with python-stix2. LEARN MORE >> OSSEC Platform for monitor | S OSSEC is a full platform to monitor and control your systems. It mixes together all the aspects of HIDS (host-based intrusion detection), log monitoring and SIM/SIEM together in a simple, powerful and open source solution LEARN MORE >> Zeek Network tool | S A powerful framework for network traffic analysis and security monitoring. LEARN MORE >> Security Onion Solutions Security Onion maintainer | S Security Onion Solutions, LLC is the creator and maintainer of Security Onion, a free and open platform for threat hunting, network security monitoring, and log management. Security Onion includes best-of-breed free and open tools including Suricata, Zeek, Wazuh, the Elastic Stack and many others LEARN MORE >> OpenCTI Security threat manager | S OpenCTI is an open source platform allowing organizations to manage their cyber threat intelligence knowledge and observables. It has been created in order to structure, store, organize and visualize technical and non-technical information about cyber threats. LEARN MORE >> Croc File transfer | S croc is a tool that allows any two computers to simply and securely transfer files and folders. LEARN MORE >> Security Monkey AWS monitor | S Security Monkey monitors your AWS and GCP accounts for policy changes and alerts on insecure configurations. Support is available for OpenStack public and private clouds. Security Monkey can also watch and monitor your GitHub organizations, teams, and repositories. LEARN MORE >> Scorecard Automated analyzer | S Automate analysis and trust decisions on the security posture of open source projects. LEARN MORE >> Syft SBOM Generator | S A CLI tool and go library for generating a Software Bill of Materials (SBOM) from container images and filesystems. Exceptional for vulnerability detection when used with a scanner tool like Grype. LEARN MORE >> Grype Vulnerability scanner | S A vulnerability scanner for container images and filesystems. Easily install the binary to try it out. Works with Syft, the powerful SBOM (software bill of materials) tool for container images and filesystems. LEARN MORE >> Emmy Protocols Library | S Emmy is a library for building protocols/applications based on zero-knowledge proofs, for example anonymous credentials. Zero-knowledge proofs are client-server protocols (in crypto terms also prover-verifier, where the prover takes on the role of the client, and the verifier takes on the role of the server) where the client proves a knowledge of a secret without actually revealing the secret LEARN MORE >> Threat Dragon Threat modelling | S Threat Dragon is a free, open-source, cross-platform threat modelling application including system diagramming and a threat rule engine to auto-generate threats/mitigations. It is an OWASP Incubator Project and follows the values and principles of the threat modeling manifesto. The roadmap for the project is a simple UX, a powerful rule engine and integration with other development lifecycle tools. LEARN MORE >> Trivy Vulnerability scan | S Trivy (tri pronounced like trigger, vy pronounced like envy) is a simple and comprehensive scanner for vulnerabilities in container images, file systems, and Git repositories, as well as for configuration issues. Trivy detects vulnerabilities of OS packages (Alpine, RHEL, CentOS, etc.) and language-specific packages (Bundler, Composer, npm, yarn, etc.). In addition, Trivy scans Infrastructure as Code (IaC) files such as Terraform, Dockerfile and Kubernetes, to detect potential configuration issues that expose your deployments to the risk of attack. LEARN MORE >> OWASP Glue Framework for Security tools | S Glue is a framework for running a series of tools. Generally, it is intended as a backbone for automating a security analysis pipeline of tools. LEARN MORE >> ModSecurity Interface for ModSecurity Connectors | S Libmodsecurity is one component of the ModSecurity v3 project. The library codebase serves as an interface to ModSecurity Connectors taking in web traffic and applying traditional ModSecurity processing. In general, it provides the capability to load/interpret rules written in the ModSecurity SecRules format and apply them to HTTP content provided by your application via Connectors. LEARN MORE >> Archery Vulnerability assessment/management | S Archery is an opensource vulnerability assessment and management tool which helps developers and pentesters to perform scans and manage vulnerabilities. Archery uses popular opensource tools to perform comprehensive scanning for web application and network. It also performs web application dynamic authenticated scanning and covers the whole applications by using selenium. The developers can also utilize the tool for implementation of their DevOps CI/CD environment. LEARN MORE >>","title":"Tracked OSS projects"},{"location":"raise_issue.html","text":"Process for raising an issue Before raising an issue the contributor should follow the listed steps: Issue should have an accepted RF number approved by the team. Issue should be raised in Be-Secure's issue section Must provide with snapshots if necessary Each issue should be tracked down and closed by the assignee . Recommended to mark checklist of the issue template before submitting","title":"Raise issue"},{"location":"raise_issue.html#process-for-raising-an-issue","text":"Before raising an issue the contributor should follow the listed steps: Issue should have an accepted RF number approved by the team. Issue should be raised in Be-Secure's issue section Must provide with snapshots if necessary Each issue should be tracked down and closed by the assignee . Recommended to mark checklist of the issue template before submitting","title":"Process for raising an issue"},{"location":"raise_pull_request.html","text":"Process to raise a pull request Pull request from developer's point of view It is recommended to create a new branch in developer's local github repository for working on new code changes/features . Once developer's code change has completed the developer should make a pull request to any other contributor's recommended branch to testing the code out based on the checklist . A developer is recommeded to follow the listed steps , for successful merge of their code pull requests. step 1: For avoiding future merge conflicts sync your master repository with Be-Secure/master. step 2: Sync you local master branch with remote branch master (recommended) step 3: create a new branch from synced master branch with assigned (optional eg: RF-xxxx ) step 4: Should work on the newly created branch mentioned in step 3 step 5: Once the work is done make a pull request from branch mentioned in step 3 to contributors specified branch. Pull request from code reviewer's point of view The contributor merges the isolated code change pull request to the local branch created specifically for this code review. and tests out the functionalty,do a thorough review based on the checklist provided by the team Be-Secure . Once the the contributor feels like the code is functional , and it satisfies the checklist they should provide a LGTM approval in the hyperledgerkochi/KOBman's pull section . Only then the code gets merged to Be-Secure's github master repository . A code reviewer is recommeded to follow the listed steps , before providing LGTM approval. step 1: Merge the pull request to new_branch created specifically for testing the code changes in this pull request (new_branch should be synced with Be-Secure/master ) step 3: Once merged need to test it out by releasing a local version and install/test kob utility from the code reviewers local system. step 4: If the functionality is working as expected , do thorough code review based on checklist step 5: Finally if the code passes the checklist , give a LGTM approval other recommended steps: step : The title of the pull request should match the issue raised related to the same. step : The pull request template is to be filled in before submission, ensuring that it is linked back to the Github Issue number by replacing #XXX with the appropriate Issue reference. step : Each pull request should also be accompanied by a passing test(s) proving it's validity (where feasible).","title":"Raise pull request"},{"location":"raise_pull_request.html#process-to-raise-a-pull-request","text":"","title":"Process to raise a pull request"},{"location":"raise_pull_request.html#pull-request-from-developers-point-of-view","text":"It is recommended to create a new branch in developer's local github repository for working on new code changes/features . Once developer's code change has completed the developer should make a pull request to any other contributor's recommended branch to testing the code out based on the checklist . A developer is recommeded to follow the listed steps , for successful merge of their code pull requests. step 1: For avoiding future merge conflicts sync your master repository with Be-Secure/master. step 2: Sync you local master branch with remote branch master (recommended) step 3: create a new branch from synced master branch with assigned (optional eg: RF-xxxx ) step 4: Should work on the newly created branch mentioned in step 3 step 5: Once the work is done make a pull request from branch mentioned in step 3 to contributors specified branch.","title":"Pull request from developer's point of view"},{"location":"raise_pull_request.html#pull-request-from-code-reviewers-point-of-view","text":"The contributor merges the isolated code change pull request to the local branch created specifically for this code review. and tests out the functionalty,do a thorough review based on the checklist provided by the team Be-Secure . Once the the contributor feels like the code is functional , and it satisfies the checklist they should provide a LGTM approval in the hyperledgerkochi/KOBman's pull section . Only then the code gets merged to Be-Secure's github master repository . A code reviewer is recommeded to follow the listed steps , before providing LGTM approval. step 1: Merge the pull request to new_branch created specifically for testing the code changes in this pull request (new_branch should be synced with Be-Secure/master ) step 3: Once merged need to test it out by releasing a local version and install/test kob utility from the code reviewers local system. step 4: If the functionality is working as expected , do thorough code review based on checklist step 5: Finally if the code passes the checklist , give a LGTM approval","title":"Pull request from code reviewer's point of view"},{"location":"raise_pull_request.html#other-recommended-steps","text":"step : The title of the pull request should match the issue raised related to the same. step : The pull request template is to be filled in before submission, ensuring that it is linked back to the Github Issue number by replacing #XXX with the appropriate Issue reference. step : Each pull request should also be accompanied by a passing test(s) proving it's validity (where feasible).","title":"other recommended steps:"},{"location":"tech_stack.html","text":"Be-Secure Open Source Security Tech Stacks: Open source is a vast technology space. We have frequent releases, bug fixes / patches being published very frequently. It is quite a tedious and time consuming effort for an organization to keep track of all changes that happen across the open source software landscape. Hence we have categorised open source technologies into five Be-Secure Open Source security tech stacks or blue prints to help the Be-Secure community navigate through security assessment of open source projects that are part of one of these categories. The open source projects are categorized based on purpose, interoperability and technology. They also include other open source dependencies that are frequently required to develop enterprise grade open source solutions. Be-Secure Open Source Security tech stacks are - DevOps [DO] : Be-Secure tech stacks to secure open source devops tools eg. Ansible, Puppet etc. Language and framework [L&F] : Be-Secure tech stacks to secure language and framework built on generic languages e.g. Ruby & Rails, PHP & Symphony, Python & Django, Javascript & Angular/Node etc. Application [A] Distributed & Decentralized Application [DA] : Be-Secure tech stacks for distributed and decentralized Distributed application, few e.g. are Blockchain frameworks like Hyperledger Indy, Hyperledger Fabric , Quorum etc. Open-source Security Tool [S] : Be-Secure tech stacks for open source security tools eg. ZAP, BeEF etc. Each BeSecure tech stack will be associated with two types of BeSman environments namely the Development or Provisioning environment [Dev] as well as the security testing or security sandbox environment [Sec]. BeSecure Environment for Blue teams/Teaming This is an environment configured for an open source project, prebundled with the required security tools and dependencies that would permit the Blue team to validate application of security patches and confirm compliance to all defined security controls. BeSecure Environment for Red Teams/Teaming This is an environment configured for the Red team, prebundled with the required security tools and dependencies to conduct red teaming activities on an open source project with focus on unearthing vulnerabilities and exploits to compromise the security posture of the project. The Security assessment report of the tracked project will be updated under BeSLighthouse project.","title":"Tech stack"},{"location":"insiders/index.html","text":"TBD","title":"Index"},{"location":"insiders/index.html#tbd","text":"","title":"TBD"}]}