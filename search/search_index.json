{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"","title":"Home"},{"location":"bes-app-tech-stack/","text":"Application [A] Tech Stack This security stack focuses on all open source applications and how they can be secured. Drupal Sl.No BeSman Env name Dependencies Entities Prebundled in besman Env 01 bes-drupaldev-env TBD 02 bes-drupalsec-env TBD, bes-appsastsec-env, bes-appdastsec-env, bes-pensec-env Odoo Sl.No BeSman Env name Dependencies Entities Prebundled in besman Env 01 bes-odoodev-env TBD 02 bes-odoosec-env TBD, bes-appsastsec-env, bes-appdastsec-env, bes-pensec-env","title":"A Tech Stack"},{"location":"bes-assessment/","text":"Be-Secure seven stage security assessment This section describes the seven stages of Be-Secure CE security assessment to enhance the security posture of open source projects / open source tech stacks. Once we receive a request from the community member / user of Be-Secure project to assess an open source tech stack, we will fork the respective open source project into Be-Secure namespace. Then we will commence with our seven stage security assessment as listed below - First stage: Identification of the blueprint for BeSman environment using the details on the open source tech stack that has been shared. Second stage: If a suitable blueprint doesn\u2019t exist, build a new BeSman environment. This will be the base environment to perform development activities for the shared open source tech stack. Third stage: Build the security testing environment/sandbox that can be utilized for conducting security testing for the specific open source tech stack. Fourth stage: Conduct security assessment and identify the vulnerabilities in it. This vulnerability information will be published. Fifth stage: Identify and develop security patches for the identified vulnerabilities. Sixth stage: Upgrade the respective BeSman environments with the confirmed new security patches to strengthen their security posture. Publish the upgraded BeSman environments for active consumption Seventh stage: For an existing BeSman environment, the focus is on identifying the latest security vulnerabilities and mapping it to the respective environment. This is a continuous activity that is focused on enhancing the security posture of BeSman environments to address the latest identified vulnerabilities. BeS Lab - An Open Source Security Lab The lab is designed to deliver enterprise grade trusted and verified open source software (TAVOSS) and customized open source security services. Objective of Open Source Security Lab: Perform open source and security compliance checks. Generate Trusted And Verified Open Source Software (TAVOSS) components. Customizing security environments for performing security testing activities. Generating security assets to perform open source security testing in an efficient manner. Perform continuous fuzzing of onboarded projects to identify and publish inherent vulnerabilities. Provisioning of Open Source Security Lab Lab in a Box (LiB) For easy consumption by any open source community member/ open source security specialist to conduct security assessment activities. The lab services will be hosted on the resources owned by the security specialist.","title":"Security Assessment"},{"location":"bes-assessment/#be-secure-seven-stage-security-assessment","text":"This section describes the seven stages of Be-Secure CE security assessment to enhance the security posture of open source projects / open source tech stacks. Once we receive a request from the community member / user of Be-Secure project to assess an open source tech stack, we will fork the respective open source project into Be-Secure namespace. Then we will commence with our seven stage security assessment as listed below - First stage: Identification of the blueprint for BeSman environment using the details on the open source tech stack that has been shared. Second stage: If a suitable blueprint doesn\u2019t exist, build a new BeSman environment. This will be the base environment to perform development activities for the shared open source tech stack. Third stage: Build the security testing environment/sandbox that can be utilized for conducting security testing for the specific open source tech stack. Fourth stage: Conduct security assessment and identify the vulnerabilities in it. This vulnerability information will be published. Fifth stage: Identify and develop security patches for the identified vulnerabilities. Sixth stage: Upgrade the respective BeSman environments with the confirmed new security patches to strengthen their security posture. Publish the upgraded BeSman environments for active consumption Seventh stage: For an existing BeSman environment, the focus is on identifying the latest security vulnerabilities and mapping it to the respective environment. This is a continuous activity that is focused on enhancing the security posture of BeSman environments to address the latest identified vulnerabilities.","title":"Be-Secure seven stage security assessment"},{"location":"bes-assessment/#bes-lab-an-open-source-security-lab","text":"The lab is designed to deliver enterprise grade trusted and verified open source software (TAVOSS) and customized open source security services. Objective of Open Source Security Lab: Perform open source and security compliance checks. Generate Trusted And Verified Open Source Software (TAVOSS) components. Customizing security environments for performing security testing activities. Generating security assets to perform open source security testing in an efficient manner. Perform continuous fuzzing of onboarded projects to identify and publish inherent vulnerabilities.","title":"BeS Lab - An Open Source Security Lab"},{"location":"bes-assessment/#provisioning-of-open-source-security-lab","text":"","title":"Provisioning of Open Source Security Lab"},{"location":"bes-assessment/#lab-in-a-box-lib","text":"For easy consumption by any open source community member/ open source security specialist to conduct security assessment activities. The lab services will be hosted on the resources owned by the security specialist.","title":"Lab in a Box (LiB)"},{"location":"bes-besLighthouse-details/","text":"What is BeSLighthouse? BeSlighthouse is community dashboard for security assessment of Open-Source Security Tech Stacks. How to run BeSLighthouse locally? Clone the BeSLighthouse project locally. git clone https://github.com/Be-Secure/BeSLighthouse Install all the required dependency in BeSLighthouse. cd BeSLighthouse pip install -r requirements.txt Run the application using mkdocs mkdocs serve What BeS Tech Stack BeSLighthouse support five type of Tech Stack which is being listed in Project Of Interest, below is detail explanation about it. DevOps [DO] : Be-Secure tech stacks to secure open source devops tools eg. Ansible, Puppet etc... Language and framework [L&F] : Be-Secure tech stacks to secure language and framework built on generic languages e.g: Ruby & Rails, PHP & Symphony, Python & Django, JavaScript & Angular/NodeJs etc... Application [A] : Be-Secure tech stacks for fully function open-source application like Drupal, magneto, odoo etc... Distributed & Decentralized Application [DA] : Be-Secure tech stacks for distributed and decentralized Distributed application, few e.g: are Blockchain frameworks like Hyperledger Indy, Hyperledger Fabric, Quorum etc... Open-source Security Tool [s] : Be-Secure tech stacks for open-source security tools eg: ZAP, BeEF etc. Languages track in BeSLighthouse Link There are many languages which are being tracked in BeSLighthouse like: JavaScript , Java , C , C++ , python etc... Version history in BeSLighthouse Version history contains the detail about the project like: Project name. BeS Tracking ID. BeS Tech Stack. Description about the project. Release Date of the track project. Known Vulnerability count. Version of project being track. Assessment Report which give overview about the assessment being done like: Scorecard. Criticality Score. Sonarqube report. Codeql report. SBOM report. Fossology report. Fuzz report. snyk report. Show the graph of the Vulnerabilities have been found for the version being track: No_of_Vulnerabilities DoS Code_Execution ByPass_something Sql_Injection XSS Overflow Memory_Corruption Directory_Traversal Http_Response_splitting No_of_expoloits File_Inclusion Gain_Information Gain_Privileges CSRF","title":"BeSLighthouse"},{"location":"bes-besLighthouse-details/#what-is-beslighthouse","text":"BeSlighthouse is community dashboard for security assessment of Open-Source Security Tech Stacks.","title":"What is BeSLighthouse?"},{"location":"bes-besLighthouse-details/#how-to-run-beslighthouse-locally","text":"Clone the BeSLighthouse project locally. git clone https://github.com/Be-Secure/BeSLighthouse Install all the required dependency in BeSLighthouse. cd BeSLighthouse pip install -r requirements.txt Run the application using mkdocs mkdocs serve","title":"How to run BeSLighthouse locally?"},{"location":"bes-besLighthouse-details/#what-bes-tech-stack","text":"","title":"What BeS Tech Stack"},{"location":"bes-besLighthouse-details/#beslighthouse-support-five-type-of-tech-stack-which-is-being-listed-in-project-of-interest-below-is-detail-explanation-about-it","text":"DevOps [DO] : Be-Secure tech stacks to secure open source devops tools eg. Ansible, Puppet etc... Language and framework [L&F] : Be-Secure tech stacks to secure language and framework built on generic languages e.g: Ruby & Rails, PHP & Symphony, Python & Django, JavaScript & Angular/NodeJs etc... Application [A] : Be-Secure tech stacks for fully function open-source application like Drupal, magneto, odoo etc... Distributed & Decentralized Application [DA] : Be-Secure tech stacks for distributed and decentralized Distributed application, few e.g: are Blockchain frameworks like Hyperledger Indy, Hyperledger Fabric, Quorum etc... Open-source Security Tool [s] : Be-Secure tech stacks for open-source security tools eg: ZAP, BeEF etc.","title":"BeSLighthouse support five type of Tech Stack which is being listed in Project Of Interest, below is detail explanation about it."},{"location":"bes-besLighthouse-details/#languages-track-in-beslighthouse-link","text":"There are many languages which are being tracked in BeSLighthouse like: JavaScript , Java , C , C++ , python etc...","title":"Languages track in BeSLighthouse Link"},{"location":"bes-besLighthouse-details/#version-history-in-beslighthouse","text":"Version history contains the detail about the project like: Project name. BeS Tracking ID. BeS Tech Stack. Description about the project. Release Date of the track project. Known Vulnerability count. Version of project being track. Assessment Report which give overview about the assessment being done like: Scorecard. Criticality Score. Sonarqube report. Codeql report. SBOM report. Fossology report. Fuzz report. snyk report. Show the graph of the Vulnerabilities have been found for the version being track: No_of_Vulnerabilities DoS Code_Execution ByPass_something Sql_Injection XSS Overflow Memory_Corruption Directory_Traversal Http_Response_splitting No_of_expoloits File_Inclusion Gain_Information Gain_Privileges CSRF","title":"Version history in BeSLighthouse"},{"location":"bes-beslab-details/","text":"What is BesLab? BeSLab is an open source security lab dedicated to fortifying open source projects against potential vulnerabilities. Designed to operate efficiently even in low-resource settings, BeSLab provides a comprehensive solution that grants complete control and transparency to application security and security operations teams. Additionally, it serves as a valuable resource for security researchers by streamlining the process of bringing open source projects under scrutiny and significantly reducing remediation time. With BeSLab, security professionals can leverage its suite of tools and functionalities to conduct thorough assessments, perform rigorous testing, and identify potential security gaps within open source projects. By offering complete visibility and control, BeSLab empowers security teams to implement robust security measures and safeguards, ensuring the integrity and resilience of open source software. You can leverage BeS Environment Script Repository & BeS Playbooks to Launch OSS Security exploits(Red Teaming) and patching OSS vulnerabilites (Blue Teaming) from within a BeSLab. We have developed a CLI tool named BLIman that uses a Genesis.yaml to bring in BeSlab usling `BLIman. What is BLIman? This is a commandline tool to install BeSLab using Genesis.yaml. What is a Genesis file ? Genesis file is the main configuration file to bring up the lab. This file contains all the lab configuration as a whole. Example: 1. which OS to use 2. which tools to be installed 3. what all are the folder structure to be there 4. will there be any package manager etc. There is a default_genesis.yaml file which can be placed at user_home/root/.bliman. BLIman would generate the config.yaml file for oah-bes-vm from genesis.yaml file export variables. Various way to install BeSLab using BLIman host mode using oah-bes-vm/ansible bare metal mode using ansible and oah-bes-vm directly using besman without oah-bes-vm/ansible using BeSlab env scripts from BeSLab repository. Features designed to run on low resource setting user can specify which tool to add which to remove quickly bring up the lab for red teaming (RT) and Blue teaming (BT) activity simple deployment using BLiMan How to use ? The development is underway and the steps will be shared here soon.","title":"BeSLab"},{"location":"bes-beslab-details/#what-is-beslab","text":"BeSLab is an open source security lab dedicated to fortifying open source projects against potential vulnerabilities. Designed to operate efficiently even in low-resource settings, BeSLab provides a comprehensive solution that grants complete control and transparency to application security and security operations teams. Additionally, it serves as a valuable resource for security researchers by streamlining the process of bringing open source projects under scrutiny and significantly reducing remediation time. With BeSLab, security professionals can leverage its suite of tools and functionalities to conduct thorough assessments, perform rigorous testing, and identify potential security gaps within open source projects. By offering complete visibility and control, BeSLab empowers security teams to implement robust security measures and safeguards, ensuring the integrity and resilience of open source software. You can leverage BeS Environment Script Repository & BeS Playbooks to Launch OSS Security exploits(Red Teaming) and patching OSS vulnerabilites (Blue Teaming) from within a BeSLab.","title":"What is BesLab?"},{"location":"bes-beslab-details/#we-have-developed-a-cli-tool-named-bliman-that-uses-a-genesisyaml-to-bring-in-beslab-usling-bliman","text":"","title":"We have developed a CLI tool named BLIman that uses a Genesis.yaml to bring in BeSlab usling `BLIman."},{"location":"bes-beslab-details/#what-is-bliman","text":"This is a commandline tool to install BeSLab using Genesis.yaml.","title":"What is BLIman?"},{"location":"bes-beslab-details/#what-is-a-genesis-file","text":"Genesis file is the main configuration file to bring up the lab. This file contains all the lab configuration as a whole. Example: 1. which OS to use 2. which tools to be installed 3. what all are the folder structure to be there 4. will there be any package manager etc. There is a default_genesis.yaml file which can be placed at user_home/root/.bliman. BLIman would generate the config.yaml file for oah-bes-vm from genesis.yaml file export variables.","title":"What is a Genesis file ?"},{"location":"bes-beslab-details/#various-way-to-install-beslab-using-bliman","text":"host mode using oah-bes-vm/ansible bare metal mode using ansible and oah-bes-vm directly using besman without oah-bes-vm/ansible using BeSlab env scripts from BeSLab repository.","title":"Various way to install BeSLab using BLIman"},{"location":"bes-beslab-details/#features","text":"designed to run on low resource setting user can specify which tool to add which to remove quickly bring up the lab for red teaming (RT) and Blue teaming (BT) activity simple deployment using BLiMan","title":"Features"},{"location":"bes-beslab-details/#how-to-use","text":"The development is underway and the steps will be shared here soon.","title":"How to use ?"},{"location":"bes-besman-details/","text":"What is BeSman? BeSman is a command-line utility to provision customized environments for each open source projects. Environments We have two types of BeSman environments \u2013 Red Team(RT) and Blue Team(BT) . Red Team(RT) environments The RT environments are bundled with all the tools necessary for a Red Team user to assess the project for vulnerabilities and start working on an exploit. Blue Team(BT) environments The BT environmnets are bundled with all the tools necessary for a Blue Team user to remediate the vulnerability exploited by Red Team user. Playbooks Be-Secure playbooks are created to run exploits as well as automate activities like security assessments. There are three types of playbook - Automated , Semi-automated and Manual Automated playbooks The playbooks are either shell scripts or ansible playbooks and the operations are automated. Semi-automated playbooks The playbooks will be jupyter notebooks. Manual playbooks The playbooks are .md file and would contain step-by-step info on how to proceed with an activity. Why do we need BeSman utility? People invest significant time and energy in the setup and configuration of open source projects on their local systems for evaluation or to begin working on them. However, they often encounter difficulties and setbacks related to configuration, requiring additional effort to resolve these issues. This substantial effort is primarily focused on getting the environment ready, rather than actually leveraging the existing open source project to develop new capabilities. It is important to find more efficient ways to manage this investment of effort. This is where the BeSman utility comes in, offering command-line functionality to swiftly and consistently provision tailored environments. How can BeSman utility help? BeSman environments are pre-bundled with tools and dependencies for a specific open project and it can be provisioned using simple bash shell commands from BeSman utility. BeSman utility will also provide configurable capabilities that would permit the user to configure the tools and dependencies to be pre-bundled in the environment. Individuals will have complete control over what goes into building and provisioning the environment. The base BeSman environment can be customized further to address specific project needs. This gives a lot of flexibility to the developer/security tester to optimize their work environment in a seamless manner. BeSman environments come pre-packaged with all the necessary tools and dependencies for a particular open source project. These environments can be easily provisioned using simple bash shell commands through the BeSman utility. Additionally, the BeSman utility offers configurable capabilities, allowing users to customize the selection of tools and dependencies included in the environment. This gives individuals complete control over the setup and provisioning process, enabling them to tailor the environment to their specific needs. Moreover, the base BeSman environment is highly adaptable and can be further customized to meet the unique requirements of a particular project. This level of flexibility empowers developers and security testers to effortlessly optimize their work environment according to their preferences. Installing BeSman using oah-shell We will be using oah-installer , a component of OpenAppHack(OAH) , to install oah-shell in the local system and using it to bring up oah-bes-vm with BeSman installed. Pre-requisites Virtual Box Vagrant Ansible Steps Open your terminal Install oah-shell curl -L https://raw.githubusercontent.com/Be-secure/oah-installer/master/install.sh | bash Confirm the installation oah-shell by executing the below command which would list various oah commands oah Execute the below command to get the list of environments oah list Note: Make sure oah-bes-vm is listed. If not, execute step 2 and run the below command source ${OAH_DIR}/bin/oah-init Setup oah-bes-vm for BeSman by executing the below command. oah install -v oah-bes-vm Install from source Pre-requisites Ansible Github CLI(gh) Steps Open your terminal Run the installer script curl -L https://raw.githubusercontent.com/Be-Secure/BeSman/dist/dist/get.besman.io | bash Source the files into memory source $HOME/.besman/bin/besman-init.sh Confirm installation bes Usage Create an environment script Dependent on ansible roles Clone the repo before running the command. bes create -env <environment> -V <version> Once you run the command, you will be prompted to provide the path to the cloned dir. This command would create an environment script which piggybacks on Ansible roles as well as a configuration file. Both the files will be present in your besecure-ce-env-repo dir. The template of the config file is given below. You can use this to modify the parameters of the environment script as well as ansible roles --- BESMAN_ORG: Be-Secure BESMAN_OSSP: BESMAN_OSSP_CLONE_PATH: $HOME/$BESMAN_OSSP BESMAN_ANSIBLE_ROLES_PATH: $BESMAN_DIR/tmp/$BESMAN_OSSP/roles BESMAN_ANSIBLE_ROLES: # Comma separated list of ansible roles <namespace>/<repo>,<namespace>/<repo> BESMAN_OSS_TRIGGER_PLAYBOOK_PATH: $BESMAN_DIR/tmp/$BESMAN_OSSP BESMAN_OSS_TRIGGER_PLAYBOOK: besman-$BESMAN_OSSP-[BT/RT]-trigger-playbook.yaml BESMAN_DISPLAY_SKIPPED_ANSIBLE_HOSTS: false # Please add other variables as well as ansible variables here` openjdk_version: 1.8 If you wish to modify the parameters of the config file, Visit the env repo Move into the dir of the project you wish to install Copy the config file Paste it in you user home under the same name. Modify the parameters Run the install Benefits Control - Easier control over the tools which gets installed. Configurability - Easier to configure the tool parameters. Standalone environment script If you wish to create a standalone environment script which doesn't rely on Ansible roles, run the below command. bes create -env <environment> -V <version> basic Benefits Light weight - Light weight script as it doesn't rely on ansible or roles. List the available environments At any time, besman can install environments from a single source - A remote environment repo bes set BESMAN_LOCAL_ENV False bes set BESMAN_ENV_REPOS <namespace>/<repo> bes list The output will mention which repo BeSman points to now. Local environment dir bes set BESMAN_LOCAL_ENV False bes set BESMAN_LOCAL_ENV_DIR <complete path to you besecure-ce-env-repo dir> bes list The output will mention the dir BeSman points to now. When you run the create command, the list command will be automatically updated to point to the local env dir. Install an environment You can install and environment by running the below command. Make sure the environment is listed when running the bes list command. bes install -env <environment name> -V <version> The default configuration file for the environment will be residing next to the environment script inside the remote repo or the local directory. If you wish to override any default values have a copy of the configuration file in your user home dir and make the changes. Uninstall an environment Run the below command to uninstall an environment. This would remove the tools installed using installation. bes uninstall -env <environment name> Validate the installation Validate the installation/uninstalltion by running, bes validate -env <environment name> Update configurations Run the below command to update the configurations in an environment bes update -env <environment name> Reset configurations Run the below command to reset the configurations to default. bes reset -env <environment name> Install an environment from a different repo Make sure you fork or have a repo with the format similar to Be-Secure environment repo . Update the list.txt file in the repo to reflect the GitHub org and Repo name . Run the bes set command to make BeSman point to a different repo. bes set BESMAN_LOCAL_ENV False bes set BESMAN_ENV_REPOS <namespace>/<repo> Run the list command bes list Status Displays the list of installed environments bes status Run playbooks Fetch playbooks bes pull --playbook Confirm the availability bes list --playbook Run the playbook bes run --playbook <playbook name> bes run --playbook <playbook name> --input <inputs>","title":"BeSman"},{"location":"bes-besman-details/#what-is-besman","text":"BeSman is a command-line utility to provision customized environments for each open source projects.","title":"What is BeSman?"},{"location":"bes-besman-details/#environments","text":"We have two types of BeSman environments \u2013 Red Team(RT) and Blue Team(BT) .","title":"Environments"},{"location":"bes-besman-details/#red-teamrt-environments","text":"The RT environments are bundled with all the tools necessary for a Red Team user to assess the project for vulnerabilities and start working on an exploit.","title":"Red Team(RT) environments"},{"location":"bes-besman-details/#blue-teambt-environments","text":"The BT environmnets are bundled with all the tools necessary for a Blue Team user to remediate the vulnerability exploited by Red Team user.","title":"Blue Team(BT) environments"},{"location":"bes-besman-details/#playbooks","text":"Be-Secure playbooks are created to run exploits as well as automate activities like security assessments. There are three types of playbook - Automated , Semi-automated and Manual","title":"Playbooks"},{"location":"bes-besman-details/#automated-playbooks","text":"The playbooks are either shell scripts or ansible playbooks and the operations are automated.","title":"Automated playbooks"},{"location":"bes-besman-details/#semi-automated-playbooks","text":"The playbooks will be jupyter notebooks.","title":"Semi-automated playbooks"},{"location":"bes-besman-details/#manual-playbooks","text":"The playbooks are .md file and would contain step-by-step info on how to proceed with an activity.","title":"Manual playbooks"},{"location":"bes-besman-details/#why-do-we-need-besman-utility","text":"People invest significant time and energy in the setup and configuration of open source projects on their local systems for evaluation or to begin working on them. However, they often encounter difficulties and setbacks related to configuration, requiring additional effort to resolve these issues. This substantial effort is primarily focused on getting the environment ready, rather than actually leveraging the existing open source project to develop new capabilities. It is important to find more efficient ways to manage this investment of effort. This is where the BeSman utility comes in, offering command-line functionality to swiftly and consistently provision tailored environments.","title":"Why do we need BeSman utility?"},{"location":"bes-besman-details/#how-can-besman-utility-help","text":"BeSman environments are pre-bundled with tools and dependencies for a specific open project and it can be provisioned using simple bash shell commands from BeSman utility. BeSman utility will also provide configurable capabilities that would permit the user to configure the tools and dependencies to be pre-bundled in the environment. Individuals will have complete control over what goes into building and provisioning the environment. The base BeSman environment can be customized further to address specific project needs. This gives a lot of flexibility to the developer/security tester to optimize their work environment in a seamless manner. BeSman environments come pre-packaged with all the necessary tools and dependencies for a particular open source project. These environments can be easily provisioned using simple bash shell commands through the BeSman utility. Additionally, the BeSman utility offers configurable capabilities, allowing users to customize the selection of tools and dependencies included in the environment. This gives individuals complete control over the setup and provisioning process, enabling them to tailor the environment to their specific needs. Moreover, the base BeSman environment is highly adaptable and can be further customized to meet the unique requirements of a particular project. This level of flexibility empowers developers and security testers to effortlessly optimize their work environment according to their preferences.","title":"How can BeSman utility help?"},{"location":"bes-besman-details/#installing-besman-using-oah-shell","text":"We will be using oah-installer , a component of OpenAppHack(OAH) , to install oah-shell in the local system and using it to bring up oah-bes-vm with BeSman installed.","title":"Installing BeSman using oah-shell"},{"location":"bes-besman-details/#pre-requisites","text":"Virtual Box Vagrant Ansible","title":"Pre-requisites"},{"location":"bes-besman-details/#steps","text":"Open your terminal Install oah-shell curl -L https://raw.githubusercontent.com/Be-secure/oah-installer/master/install.sh | bash Confirm the installation oah-shell by executing the below command which would list various oah commands oah Execute the below command to get the list of environments oah list Note: Make sure oah-bes-vm is listed. If not, execute step 2 and run the below command source ${OAH_DIR}/bin/oah-init Setup oah-bes-vm for BeSman by executing the below command. oah install -v oah-bes-vm","title":"Steps"},{"location":"bes-besman-details/#install-from-source","text":"","title":"Install from source"},{"location":"bes-besman-details/#pre-requisites_1","text":"Ansible Github CLI(gh)","title":"Pre-requisites"},{"location":"bes-besman-details/#steps_1","text":"Open your terminal Run the installer script curl -L https://raw.githubusercontent.com/Be-Secure/BeSman/dist/dist/get.besman.io | bash Source the files into memory source $HOME/.besman/bin/besman-init.sh Confirm installation bes","title":"Steps"},{"location":"bes-besman-details/#usage","text":"","title":"Usage"},{"location":"bes-besman-details/#create-an-environment-script","text":"","title":"Create an environment script"},{"location":"bes-besman-details/#dependent-on-ansible-roles","text":"Clone the repo before running the command. bes create -env <environment> -V <version> Once you run the command, you will be prompted to provide the path to the cloned dir. This command would create an environment script which piggybacks on Ansible roles as well as a configuration file. Both the files will be present in your besecure-ce-env-repo dir. The template of the config file is given below. You can use this to modify the parameters of the environment script as well as ansible roles --- BESMAN_ORG: Be-Secure BESMAN_OSSP: BESMAN_OSSP_CLONE_PATH: $HOME/$BESMAN_OSSP BESMAN_ANSIBLE_ROLES_PATH: $BESMAN_DIR/tmp/$BESMAN_OSSP/roles BESMAN_ANSIBLE_ROLES: # Comma separated list of ansible roles <namespace>/<repo>,<namespace>/<repo> BESMAN_OSS_TRIGGER_PLAYBOOK_PATH: $BESMAN_DIR/tmp/$BESMAN_OSSP BESMAN_OSS_TRIGGER_PLAYBOOK: besman-$BESMAN_OSSP-[BT/RT]-trigger-playbook.yaml BESMAN_DISPLAY_SKIPPED_ANSIBLE_HOSTS: false # Please add other variables as well as ansible variables here` openjdk_version: 1.8 If you wish to modify the parameters of the config file, Visit the env repo Move into the dir of the project you wish to install Copy the config file Paste it in you user home under the same name. Modify the parameters Run the install","title":"Dependent on ansible roles"},{"location":"bes-besman-details/#benefits","text":"Control - Easier control over the tools which gets installed. Configurability - Easier to configure the tool parameters.","title":"Benefits"},{"location":"bes-besman-details/#standalone-environment-script","text":"If you wish to create a standalone environment script which doesn't rely on Ansible roles, run the below command. bes create -env <environment> -V <version> basic","title":"Standalone environment script"},{"location":"bes-besman-details/#benefits_1","text":"Light weight - Light weight script as it doesn't rely on ansible or roles.","title":"Benefits"},{"location":"bes-besman-details/#list-the-available-environments","text":"At any time, besman can install environments from a single source - A remote environment repo bes set BESMAN_LOCAL_ENV False bes set BESMAN_ENV_REPOS <namespace>/<repo> bes list The output will mention which repo BeSman points to now. Local environment dir bes set BESMAN_LOCAL_ENV False bes set BESMAN_LOCAL_ENV_DIR <complete path to you besecure-ce-env-repo dir> bes list The output will mention the dir BeSman points to now. When you run the create command, the list command will be automatically updated to point to the local env dir.","title":"List the available environments"},{"location":"bes-besman-details/#install-an-environment","text":"You can install and environment by running the below command. Make sure the environment is listed when running the bes list command. bes install -env <environment name> -V <version> The default configuration file for the environment will be residing next to the environment script inside the remote repo or the local directory. If you wish to override any default values have a copy of the configuration file in your user home dir and make the changes.","title":"Install an environment"},{"location":"bes-besman-details/#uninstall-an-environment","text":"Run the below command to uninstall an environment. This would remove the tools installed using installation. bes uninstall -env <environment name>","title":"Uninstall an environment"},{"location":"bes-besman-details/#validate-the-installation","text":"Validate the installation/uninstalltion by running, bes validate -env <environment name>","title":"Validate the installation"},{"location":"bes-besman-details/#update-configurations","text":"Run the below command to update the configurations in an environment bes update -env <environment name>","title":"Update configurations"},{"location":"bes-besman-details/#reset-configurations","text":"Run the below command to reset the configurations to default. bes reset -env <environment name>","title":"Reset configurations"},{"location":"bes-besman-details/#install-an-environment-from-a-different-repo","text":"Make sure you fork or have a repo with the format similar to Be-Secure environment repo . Update the list.txt file in the repo to reflect the GitHub org and Repo name . Run the bes set command to make BeSman point to a different repo. bes set BESMAN_LOCAL_ENV False bes set BESMAN_ENV_REPOS <namespace>/<repo> Run the list command bes list","title":"Install an environment from a different repo"},{"location":"bes-besman-details/#status","text":"Displays the list of installed environments bes status","title":"Status"},{"location":"bes-besman-details/#run-playbooks","text":"Fetch playbooks bes pull --playbook Confirm the availability bes list --playbook Run the playbook bes run --playbook <playbook name> bes run --playbook <playbook name> --input <inputs>","title":"Run playbooks"},{"location":"bes-checklist/","text":"Sl.No Checkpoints A Naming Convention A.1 All Command files will have a prefix besman-XXXX.sh and XXXX must be the command name A.2 All Environment files will have a prefix besman-XXXXX.sh and XXXXX must be the environment name A.3 All Internal besman functions that will be called in other bes scripts must begin with __bes A.4 All function names should have meaningful names which denote what they are intended to do A.5 All besman environment scripts should have standard set of functions included in them and follow the following naming convention __bes_XXXX_YYYY() function where XXXX is the corresponding command and YYYY is the environment name For example, if the environment name is \"yyyy\", then the corresponding commands would look like:- __besman_install_yyyy() __besman_uninstall_yyyy() __besman_update_yyyy() __besman_upgrade_yyyy() __besman_validate_yyyy() __besman_start_yyyy() __besman_stop_yyyy() B Variable definition & Scoping B.1 All environment variables should be in caps (eg besman_VERSION) B.2 All export variables used in a script should be initiatlized in besman-init.sh B.3 The environment variables should be invoked using export (in the beginning of the script) if they are intended to be used as is in the script B.4 All local variables should be in small letters (eg argument(1)) B.5 The scope of local variables newly introduced should be confined to the functions they are defined in or within the script they have been defined B.6 Any variable defined in a script which is to be reused in another script should be defined as Environment Variable C Function Usage C.1 __besman_echo function should be used instead of echo to display messages in the script C.2 __besman_echo_debug function should be used to display specific error message in the script C.3 Functions to return -1 if they encounter any error during execution or don't satisfy the condition being validated or processed C.4 Return code from function execution other than 0 to be processed for exiting from script D Test Scripts D.1 All command scripts should have their correspondiing test scripts available for verification purpose and be made available along with code changes during code submission D.2 All environment scripts should have their corresponding test scripts available for verification purpose and be made available along with code changes during code submission D.3 All test scripts should have the following standard set of functions included in them :\u2013 __test_bes_init() __ test_bes_execute() __ test_bes_validate() __ test_bes_cleanup() __ test_bes_run() E Raising Pull Request E.1 Pull request should be raised only after the code has been tested in the local environment by the developer, code reviewed & feedback comments closed by the developer E.2 Code reviewers should raise pull request against the developer's repository to share feedback comments E.3 Proper comments should be given explaining the changes in the code at a high level while raising the pull request E.4 Verify if code can be optimized further - * Remove indented if else loops with appropriate case statements * Group lines of code into a function (if they are intended to achieve a specific objective) * Reuse of existing defined functions than creating newer functions","title":"Bes checklist"},{"location":"bes-community-dashboard/","text":"","title":"Community Dashboard"},{"location":"bes-contribution/","text":"We love your input! We want to make contributing to this project as easy and transparent as possible, whether it's: Reporting a bug Discussing the current state of the code Proposing new features Becoming a maintainer We Develop with Github We use github to host code, to track issues and feature requests, as well as accept pull requests. We Use Github Flow , So All Code Changes Happen Through Pull Requests Pull requests are the best way to propose changes to the codebase (we use Github Flow ). We actively welcome your pull requests: Fork the repo and create your branch from master . If you've added code that should be tested, add tests. Ensure the test suite passes. Make sure your code lints. Issue that pull request! Report bugs using Github's issues We use GitHub issues to track public bugs. Report a bug by opening a new issue ; it's that easy! Great Bug Reports tend to have: A quick summary and/or background Steps to reproduce Be specific! Give sample code snapshots if you can. What you expected would happen What actually happens Notes (possibly including why you think this might be happening, or stuff you tried that didn't work) People love thorough bug reports. Processes expected to follow by each contributors: Process for pull request Process for issues Use a Consistent Coding Style You must follow the coding standard described in the Be-Secure review Checklist . Developers View Please refer to the following link to know more about BeSman. It is built using bash and can be easily customized to provision new environments for an open source tech stack based on open source project requirements. Anyone can leverage BeSman utility to build customized environments for their projects. You can set up BeSman utility by following the steps mentioned in the Readme file. You can raise an issue once you encounter any issue with using available Besman environment scripts or using BeSman utility, we will be glad to help address the issue for you. If you are interested in resolving identified issues with the known list of BeSman environments or BeSman utility, you can raise a pull request with the required fixes. We value your contributions. Request BeSman environment. Please use this link to request Be-Secure community for developing an environment for a project/tool License Be-Secure Project is Apache 2.0 licensed. In short, when you submit code changes, your submissions are understood to be under the same Apache License 2.0 that covers the project. Feel free to contact the maintainers if that is a concern. By contributing, please ensure that you accept the Developer\u2019s Certificate Origin that will be available as part of your pull request. FAQs Click here for FAQs","title":"Contribute"},{"location":"bes-contribution/#we-develop-with-github","text":"We use github to host code, to track issues and feature requests, as well as accept pull requests. We Use Github Flow , So All Code Changes Happen Through Pull Requests Pull requests are the best way to propose changes to the codebase (we use Github Flow ). We actively welcome your pull requests: Fork the repo and create your branch from master . If you've added code that should be tested, add tests. Ensure the test suite passes. Make sure your code lints. Issue that pull request!","title":"We Develop with Github"},{"location":"bes-contribution/#report-bugs-using-githubs-issues","text":"We use GitHub issues to track public bugs. Report a bug by opening a new issue ; it's that easy! Great Bug Reports tend to have: A quick summary and/or background Steps to reproduce Be specific! Give sample code snapshots if you can. What you expected would happen What actually happens Notes (possibly including why you think this might be happening, or stuff you tried that didn't work) People love thorough bug reports.","title":"Report bugs using Github's issues"},{"location":"bes-contribution/#processes-expected-to-follow-by-each-contributors","text":"Process for pull request Process for issues","title":"Processes expected to follow by each contributors:"},{"location":"bes-contribution/#use-a-consistent-coding-style","text":"You must follow the coding standard described in the Be-Secure review Checklist .","title":"Use a Consistent Coding Style"},{"location":"bes-contribution/#developers-view","text":"Please refer to the following link to know more about BeSman. It is built using bash and can be easily customized to provision new environments for an open source tech stack based on open source project requirements. Anyone can leverage BeSman utility to build customized environments for their projects. You can set up BeSman utility by following the steps mentioned in the Readme file. You can raise an issue once you encounter any issue with using available Besman environment scripts or using BeSman utility, we will be glad to help address the issue for you. If you are interested in resolving identified issues with the known list of BeSman environments or BeSman utility, you can raise a pull request with the required fixes. We value your contributions.","title":"Developers View"},{"location":"bes-contribution/#request-besman-environment","text":"Please use this link to request Be-Secure community for developing an environment for a project/tool","title":"Request BeSman environment."},{"location":"bes-contribution/#license","text":"Be-Secure Project is Apache 2.0 licensed. In short, when you submit code changes, your submissions are understood to be under the same Apache License 2.0 that covers the project. Feel free to contact the maintainers if that is a concern. By contributing, please ensure that you accept the Developer\u2019s Certificate Origin that will be available as part of your pull request.","title":"License"},{"location":"bes-contribution/#faqs","text":"Click here for FAQs","title":"FAQs"},{"location":"bes-dev-kit/","text":"What is BeS-dev-kit? A toolkit project for the Be-Secure community contributors which reduces manual efforts of Be-Secure contributors by automating multiple manual functionalities. Who are the end users? BeSLab Admin/Manager Security Specialist How can BeS-dev-kit utility help? Generate Metadata\u200b: It helps admins, managers and security specialists to add & update an OSS project in community website.\u200b Generate Reports\u200b: It helps security specialists to generate assessment reports for OSS projects. \u200b Generate risk summary\u200b: It helps admins and managers to generate consolidated assessment report in pdf format.\u200b Validate version file\u200b: It helps admins to check version details file naming convention & version tag in GitHub pull request.\u200b Validate report files\u200b: It helps admins to check report files naming convention in GitHub pull request.\u200b Installing BeS-dev-kit Pre-requisites Python 3.10\u200b pip\u200b GitHub personal access token Steps Open your terminal Install BeS-dev-kit using below command python3 -m pip install besecure-developer-toolkit\u200b Confirm the installation BeS-dev-kit by executing the below command which would list various dev-kit commands bes-dev-kit --help Build from source Pre-requisites poetry . Use the link to install Poetry. Git Steps Open your terminal Clone the BeS-dev-kit - $ git clone https://github.com/Be-Secure/besecure-developer-toolkit.git Move into the cloned directory. Run the command - $ poetry add \"typer[all]\" Create a new virtual env using Poetry - $ poetry shell Run the command to install the tool- $ poetry install Check installation - $ bes-dev-kit --help Usage Generate Metadata bes-dev-kit generate-metadata\u200b This command used to generate json object & version details file of an open-source project that is listed in Be-Secure issues. And it also add the json object & version file in OSSP-Master.json & version_file in besecure-osspoi-datastore respectively.\u200b Generate Reports\u200b bes-dev-kit generate-report\u200b This command can generate the following reports- Scorecard, Criticality_score, codeql. After generating these reports, it can add the report files in besecure-assessment-datastore.\u200b Generate risk summary\u200b bes-dev-kit risk-summary\u200b This command takes the necessary data from report files & downloads consolidated assessment summary in pdf format.\u200b Validate report files\u200b bes-dev-kit validate-report-file\u200b It helps maintainer to validates the naming convention of report files / if report files are available.\u200b Validate version details file\u200b bes-dev-kit validate-version-file\u200b It helps maintainer to validates naming convention & version tag of version file in besecure-osspoi-datastore.\u200b","title":"BeS-dev-kit"},{"location":"bes-dev-kit/#what-is-bes-dev-kit","text":"A toolkit project for the Be-Secure community contributors which reduces manual efforts of Be-Secure contributors by automating multiple manual functionalities.","title":"What is BeS-dev-kit?"},{"location":"bes-dev-kit/#who-are-the-end-users","text":"BeSLab Admin/Manager Security Specialist","title":"Who are the end users?"},{"location":"bes-dev-kit/#how-can-bes-dev-kit-utility-help","text":"Generate Metadata\u200b: It helps admins, managers and security specialists to add & update an OSS project in community website.\u200b Generate Reports\u200b: It helps security specialists to generate assessment reports for OSS projects. \u200b Generate risk summary\u200b: It helps admins and managers to generate consolidated assessment report in pdf format.\u200b Validate version file\u200b: It helps admins to check version details file naming convention & version tag in GitHub pull request.\u200b Validate report files\u200b: It helps admins to check report files naming convention in GitHub pull request.\u200b","title":"How can BeS-dev-kit utility help?"},{"location":"bes-dev-kit/#installing-bes-dev-kit","text":"","title":"Installing BeS-dev-kit"},{"location":"bes-dev-kit/#pre-requisites","text":"Python 3.10\u200b pip\u200b GitHub personal access token","title":"Pre-requisites"},{"location":"bes-dev-kit/#steps","text":"Open your terminal Install BeS-dev-kit using below command python3 -m pip install besecure-developer-toolkit\u200b Confirm the installation BeS-dev-kit by executing the below command which would list various dev-kit commands bes-dev-kit --help","title":"Steps"},{"location":"bes-dev-kit/#build-from-source","text":"","title":"Build from source"},{"location":"bes-dev-kit/#pre-requisites_1","text":"poetry . Use the link to install Poetry. Git","title":"Pre-requisites"},{"location":"bes-dev-kit/#steps_1","text":"Open your terminal Clone the BeS-dev-kit - $ git clone https://github.com/Be-Secure/besecure-developer-toolkit.git Move into the cloned directory. Run the command - $ poetry add \"typer[all]\" Create a new virtual env using Poetry - $ poetry shell Run the command to install the tool- $ poetry install Check installation - $ bes-dev-kit --help","title":"Steps"},{"location":"bes-dev-kit/#usage","text":"","title":"Usage"},{"location":"bes-dev-kit/#generate-metadata","text":"bes-dev-kit generate-metadata\u200b This command used to generate json object & version details file of an open-source project that is listed in Be-Secure issues. And it also add the json object & version file in OSSP-Master.json & version_file in besecure-osspoi-datastore respectively.\u200b","title":"Generate Metadata"},{"location":"bes-dev-kit/#generate-reports","text":"bes-dev-kit generate-report\u200b This command can generate the following reports- Scorecard, Criticality_score, codeql. After generating these reports, it can add the report files in besecure-assessment-datastore.\u200b","title":"Generate Reports\u200b"},{"location":"bes-dev-kit/#generate-risk-summary","text":"bes-dev-kit risk-summary\u200b This command takes the necessary data from report files & downloads consolidated assessment summary in pdf format.\u200b","title":"Generate risk summary\u200b"},{"location":"bes-dev-kit/#validate-report-files","text":"bes-dev-kit validate-report-file\u200b It helps maintainer to validates the naming convention of report files / if report files are available.\u200b","title":"Validate report files\u200b"},{"location":"bes-dev-kit/#validate-version-details-file","text":"bes-dev-kit validate-version-file\u200b It helps maintainer to validates naming convention & version tag of version file in besecure-osspoi-datastore.\u200b","title":"Validate version details file\u200b"},{"location":"bes-devops-tech-stack/","text":"DevOps [DO] Tech Stack This security stack focuses on all kinds of open source tools used in DevOps and how they can be secured both in terms of it source code and its implementation. This would enable users to implement DevSecOps using secured DevOps tools. The identified DevOps tools will be assessed for security vulnerabilities and remediated. Ansible Sl.No BeSman Env name Dependencies Entities Prebundled in besman Env 01 bes-ansibledev-env Python, Ruby, bash, ansible-galaxy Git, Python, Pypi, VScode, Jenkin, Ansible-galaxy 02 bes-ansiblesec-env Java, Jenkin, bes-appsastsec-env, Python, Pypi Chef Sl.No BeSman Env name Dependencies Entities Prebundled in besman Env 01 bes-chefdev-env Ruby (client) and Ruby / Erlang (server) Git, RVM, Ruby, Erlang, VSCode, ChefSpec, Jenkin 02 bes-chefsec-env Git, RVM, bes-appsastsec-env, bes-appdastsec-env","title":"DO tech stack"},{"location":"bes-dist-decent-tech-stack/","text":"Distributed & Decentralized Application [DA] Tech Stack This security stack focuses on all open source based distributed applications and blockchain frameworks. Majority of blockchain frameworks are open source in nature. Hyperledger Indy Sl.No BeSman Env name Dependencies Entities Prebundled in besman Env 01 bes-hyperledgerIndydev-env Git, Python, Pypi, VSCode, Indy-node, Indy-sdk, crypto, Jenkins 02 bes-hyperledgerIndysec-env TBD, bes-appsastsec-env, bes-appdastsec-env, bes-pensec-env, Git Hyperledger Fabric Sl.No BeSman Env name Dependencies Entities Prebundled in besman Env 01 bes-hyperledgerFabricdev-env Git, Go, NPM, Docker, NodeJS, Jnekins, Docker compose, VSCode 02 bes-hyperledgerFabricsec-env Git, Go, bes-appsastsec-env, bes-appdastsec-env, NPM, Docker","title":"DA Tech Stack"},{"location":"bes-faq/","text":"How can I contribute to Be-Secure Projects? If you are interested to know more or want to contribute, we would love to hear from you. Please see our detailed documentation related to the Be-Secure project. How do I raise issues? All reference stack codebases and documentation are in GitHub Be-Secure . You can raise them as issues against each repository. Thank you for helping us making the reference stack better. Please make sure that you had followed the proper issue template while raising issues. How do I raise pull requests? You can make this project attractive and feature-rich using your pull requests. Please find the guideline to raise pull request here How to raise a new TAVOSS tracking request? Community members can raise a TAVOSS tracking request to inform the Be-Secure community about an open source project to be secured. The request can be raised here .","title":"FAQ"},{"location":"bes-faq/#how-can-i-contribute-to-be-secure-projects","text":"If you are interested to know more or want to contribute, we would love to hear from you. Please see our detailed documentation related to the Be-Secure project.","title":"How can I contribute to Be-Secure Projects?"},{"location":"bes-faq/#how-do-i-raise-issues","text":"All reference stack codebases and documentation are in GitHub Be-Secure . You can raise them as issues against each repository. Thank you for helping us making the reference stack better. Please make sure that you had followed the proper issue template while raising issues.","title":"How do I raise issues?"},{"location":"bes-faq/#how-do-i-raise-pull-requests","text":"You can make this project attractive and feature-rich using your pull requests. Please find the guideline to raise pull request here","title":"How do I raise pull requests?"},{"location":"bes-faq/#how-to-raise-a-new-tavoss-tracking-request","text":"Community members can raise a TAVOSS tracking request to inform the Be-Secure community about an open source project to be secured. The request can be raised here .","title":"How to raise a new TAVOSS tracking request?"},{"location":"bes-getting-started/","text":"Getting started Security for open source projects is of prime importance for us. We have identified different open source security tech stacks \u2013 grouping various open source technologies under each of these identified open source security tech stack. Please feel free to check out more about the open source security tech stack by visiting the following section in our website BeS tech stacks Creation of open source security tech stack is the first stage in our pursuit for open source security. As the next stage we have created the BeSman utility \u2013 it is a command-line utility that will enable users to install project environments based on their project needs in a seamless manner without putting much constraint on their available infrastructure. BeSman environments comprise of dev and security testing environments for each identified open source security tech stack. These environments can be customized per project needs and this is the flexibility we would like to share with you. Please refer the following to know more BeSman utility and various environments that can be provisioned View various environments Once you have identified the required BeSman environments, you can access the same from the following GitHub repository. You can use the BeSman environments to set up your development environment or to conduct security testing for your project. The security environments are pre-bundled with open source security tools to help conduct security testing of your projects. You can share your feedback after using the available BeSman environments. This would help us to refine it further. We are happy to help you with the customization on the selected BeSman environments thus enabling you to use these environments with ease. We also have enabled a Be-Secure Community Dashboard. Please click here to view the dashboard. The dashboard will enable everyone to view the security posture of identified open source projects we track as part of Be-Secure community initiative. We track these projects to keep a tab on their security posture and help the respective contributors to enhance the security posture of their projects. This list will grow as we move forward. Your projects can be one among the many open source projects we track. In case you would like us to track your project, please do visit the section \u2013 Onboarding Apart from tracking various open source projects, we as a community also contribute to a no of open source projects. To know more about this, please visit the following section . If you are interested to contribute in the Be-Secure community initiative, there are ample opportunities for you to contribute. Please have a look at our contribution part.","title":"Getting Started..."},{"location":"bes-introduction/","text":"Be-Secure Its an umbrella of open source security projects and utilities tracker maintained by the Be-Secure community with a purpose to enable internet scale open source security by aggregating open source technology stack, and offering a cutting edge open source security tools in an efficient way. Vision We envision a future where the Be-Secure community becomes the one-stop for all open source security tools and technologies that interoperate without the need for customized integrations with security handled proactively. Mission Establish a community of open source security specialist through Be-Secure community initiative Why Be-Secure ? Today open source software is an integral part of the technology landscape in many organizations. Their adoption rate is increasing year on year. The benefits from open source are multi-fold and it is the way forward to develop capabilities through collaboration with open source community projects. This approach necessitates the focus on security for open source projects. Be-Secure projects focus on addressing common security requirements of open source projects. Be-Secure is for ... Organizations, open source developers, security researchers, auditors and regulators \u2013 all can benefit from Be-Secure TAVOSS: Trusted and Verified Open Source Software TAVOSS is a set of principles and practices that can help to accelerate the adoption of open source in enterprises. TAVOSS software is vetted and secure, which can help to address security concerns. The software is also accompanied by documentation and support, which can help to address the lack of knowledge and cultural resistance. Benefits of TAVOSS Enhanced maintenance practices and reduced costs. Expertise in specific open source projects, driving efficient patching and maintenance. Fueling innovation and supporting sustainable development practices. Rapid remediation of vulnerabilities and an increased level of security awareness. Benefits from Be-Secure Developers can easily learn secure development practices and are proactively guided by Be-Secure security environments to apply those practices and automatically informed when action is needed to prevent, remediate, or mitigate security issues. Developers, auditors, and regulators can create new Be-Secure security environments and easily distribute security policies that are enforced through tooling and automation, providing continuous assurance of the results. Security assessment environments aid developers and researchers to identify security issues, like unintentional vulnerabilities and have this information swiftly flow - backward through the supply chain to someone who can rapidly address the issue. Be-Secure Community members can provide information and notifications about product defects, mitigations, quality, and supportability and have this information rapidly flow forward across the ecosystem system to all users, and users can rapidly update their software or implement mitigations as appropriate. Getting started","title":"About"},{"location":"bes-issue_template/","text":"Issue Template We regret for the issue that you are facing, Thanks for helping us by raising an issue so that we can improve ourself to do the best. Mark one of the issues given below with respect to the issue you are facing with: [ ] Issue facing with installation or setup of BeSman utility. [ ] Issue facing while running an environment. [ ] Issue facing while adding a new environment or new file. [ ] Other issues: please provide the issue in the comment box Please explain the Issue / Feature Request here: Please provide the necessary screenshots or documents regarding the issue:","title":"Bes issue template"},{"location":"bes-issue_template/#issue-template","text":"We regret for the issue that you are facing, Thanks for helping us by raising an issue so that we can improve ourself to do the best. Mark one of the issues given below with respect to the issue you are facing with: [ ] Issue facing with installation or setup of BeSman utility. [ ] Issue facing while running an environment. [ ] Issue facing while adding a new environment or new file. [ ] Other issues: please provide the issue in the comment box Please explain the Issue / Feature Request here: Please provide the necessary screenshots or documents regarding the issue:","title":"Issue Template"},{"location":"bes-lang-framework-tech-stack/","text":"Language & framework [L&F] Tech Stack This security stack focuses on all open source programming languages and its associated frameworks that are used to build various applications. These programming languages will be assessed and their vulnerabilities remediated. Python-Django Sl.No BeSman Env name Dependencies Entities Prebundled in besman Env 01 bes-pythonDjangodev-env Git, Python, VSCode, pytest, jenkins 02 bes-pythonDjangosec-env Git, bes-appsastsec-env, bes-pensec-env, Pypi, Python Java-Spring Sl.No BeSman Env name Dependencies Entities Prebundled in besman Env 01 bes-javaSpringdev-env Git, openJDK, Apache Maven, Junit, Selenium, Jenkins 02 bes-javaSpringsec-env Git, openJDK, bes-appsastsec-env, bes-pensec-env,","title":"L%F Tech Stack"},{"location":"bes-license/","text":"Be-Secure Project is Apache 2.0 licensed. In short, when you submit code changes, your submissions are understood to be under the same Apache License 2.0 that covers the project. Feel free to contact the maintainers if that is a concern. By contributing, please ensure that you accept the Developer\u2019s Certificate Origin that will be available as part of your pull request.","title":"Licence"},{"location":"bes-oah-bes-vm-details/","text":"What is oah-bes-vm? A substrate that brings up bundles of BeS & other tools to perform Red Team & Blue Team activity. Who are the end users? RT & BT activist of BeS community. Features of oah-bes-vm? Offers bundles of BeS tools that would enable users to fast track their Red Teaming / Blue Teaming activities by significantly reducing effort spent on setting up respective environments.\u202f It helps to isolate the installation of BeS projects in a specific environment. According to the needs, user can configure oah-bes-vm during installation. List of tools BeS tools BeSman BeS-dev-kit How to bring up oah-bes-vm? There are two modes to bring up oah-bes-vm. Install all BeS & other tools directly to the host system without using VirtualBox. Bring up VirtualBox & install BeS & other tools inside it. Steps Install oah-shell Open your terminal Install oah-shell curl -L https://raw.githubusercontent.com/Be-secure/oah-installer/master/install.sh | bash Confirm the installation oah-shell by executing the below command which would list various oah commands oah Execute the below command to get the list of environments oah list Note: Make sure oah-bes-vm is listed. If not, execute step 2 and run the below command source ${OAH_DIR}/bin/oah-init Execute below command to setup oah-bes-vm without using VirtualBox. `oah install -s oah-bes-vm` or Follow below steps to setup oah-bes-vm inside VirtualBox. Pre-requisites VirtualBox Vagrant Ansible Execute the below command `oah install -v oah-bes-vm` FAQ What is oah-shell? Ans: oah-shell is an open-source utility to setup oah-bes-vm. What is the default username & password for oah-bes-vm? Ans: Username- vagrant & password- vagrant","title":"oah-bes-vm"},{"location":"bes-oah-bes-vm-details/#what-is-oah-bes-vm","text":"A substrate that brings up bundles of BeS & other tools to perform Red Team & Blue Team activity.","title":"What is oah-bes-vm?"},{"location":"bes-oah-bes-vm-details/#who-are-the-end-users","text":"RT & BT activist of BeS community.","title":"Who are the end users?"},{"location":"bes-oah-bes-vm-details/#features-of-oah-bes-vm","text":"Offers bundles of BeS tools that would enable users to fast track their Red Teaming / Blue Teaming activities by significantly reducing effort spent on setting up respective environments.\u202f It helps to isolate the installation of BeS projects in a specific environment. According to the needs, user can configure oah-bes-vm during installation.","title":"Features of oah-bes-vm?"},{"location":"bes-oah-bes-vm-details/#list-of-tools","text":"","title":"List of tools"},{"location":"bes-oah-bes-vm-details/#bes-tools","text":"BeSman BeS-dev-kit","title":"BeS tools"},{"location":"bes-oah-bes-vm-details/#how-to-bring-up-oah-bes-vm","text":"There are two modes to bring up oah-bes-vm. Install all BeS & other tools directly to the host system without using VirtualBox. Bring up VirtualBox & install BeS & other tools inside it.","title":"How to bring up oah-bes-vm?"},{"location":"bes-oah-bes-vm-details/#steps","text":"Install oah-shell Open your terminal Install oah-shell curl -L https://raw.githubusercontent.com/Be-secure/oah-installer/master/install.sh | bash Confirm the installation oah-shell by executing the below command which would list various oah commands oah Execute the below command to get the list of environments oah list Note: Make sure oah-bes-vm is listed. If not, execute step 2 and run the below command source ${OAH_DIR}/bin/oah-init Execute below command to setup oah-bes-vm without using VirtualBox. `oah install -s oah-bes-vm`","title":"Steps"},{"location":"bes-oah-bes-vm-details/#or","text":"Follow below steps to setup oah-bes-vm inside VirtualBox.","title":"or"},{"location":"bes-oah-bes-vm-details/#pre-requisites","text":"VirtualBox Vagrant Ansible","title":"Pre-requisites"},{"location":"bes-oah-bes-vm-details/#execute-the-below-command","text":"`oah install -v oah-bes-vm`","title":"Execute the below command"},{"location":"bes-oah-bes-vm-details/#faq","text":"What is oah-shell? Ans: oah-shell is an open-source utility to setup oah-bes-vm. What is the default username & password for oah-bes-vm? Ans: Username- vagrant & password- vagrant","title":"FAQ"},{"location":"bes-open-source-security-tool-tech-stack/","text":"Open Source Security Tools [S] Tech Stack This security stack focuses on all open source security tools and to secure these tools for utilization. Application Security Testing (SAST ) Sl.No BeSman Env name Dependencies Entities Prebundled in besman Env 01 bes-appsastsec-env SAST-LGTM, Sonarqube, Semgrep, Gosec, OpenVAS, Vega, Grabber Application Security Testing (DAST) Sl.No BeSman Env name Dependencies Entities Prebundled in besman Env 01 bes-pensec-env DAST - ZAP, GoLismero, Metasploit, Burp Suite CE Penetration Testing Sl.No BeSman Env name Dependencies Entities Prebundled in besman Env 01 bes-pensec-env Kali Linux, Parrot Sec","title":"S Tech Stack"},{"location":"bes-oss-project-we-contribute-to/","text":"","title":"OSS project we contribute"},{"location":"bes-our_oss_project/","text":"BeSlighthouse \u2002 svg:hover {fill: blue;} Community Dashboard for security assessment of Open Source Security Tech Stacks BeSman \u2002 svg:hover {fill: blue;} A command-line utility to provision customized security environments for open source projects and vulnerabilities tracked by Be-Secure. oah-bes-vm \u2002 svg:hover {fill: blue;} Default vm for hosting BeSman and its environments. BeS-dev-kit \u2002 svg:hover {fill: blue;} A command-line utility for the BeSecure community contributors. Various tools and utilities that accelerates the contributions to community is available here. BeSLab \u2002 svg:hover {fill: blue;} This is low resource consuming Lab which can be provision on a low configuration Machine. you can choose to install it on Virtual machine on your machine or directly add the tools on your machine.","title":"Our OSS projects"},{"location":"bes-our_oss_project/#beslighthouse-svghover-fill-blue","text":"Community Dashboard for security assessment of Open Source Security Tech Stacks","title":"BeSlighthouse &ensp;  svg:hover {fill: blue;}  "},{"location":"bes-our_oss_project/#besman-svghover-fill-blue","text":"A command-line utility to provision customized security environments for open source projects and vulnerabilities tracked by Be-Secure.","title":"BeSman&ensp;  svg:hover {fill: blue;}  "},{"location":"bes-our_oss_project/#oah-bes-vm-svghover-fill-blue","text":"Default vm for hosting BeSman and its environments.","title":"oah-bes-vm&ensp;  svg:hover {fill: blue;}  "},{"location":"bes-our_oss_project/#bes-dev-kit-svghover-fill-blue","text":"A command-line utility for the BeSecure community contributors. Various tools and utilities that accelerates the contributions to community is available here.","title":"BeS-dev-kit&ensp;  svg:hover {fill: blue;}  "},{"location":"bes-our_oss_project/#beslab-svghover-fill-blue","text":"This is low resource consuming Lab which can be provision on a low configuration Machine. you can choose to install it on Virtual machine on your machine or directly add the tools on your machine.","title":"BeSLab&ensp;  svg:hover {fill: blue;}  "},{"location":"bes-projects_we_track/","text":"As part of the Be-Secure project, the community will be tracking the following projects \u2013 Hyperledger Fabric Blockchain solutions | DA Hyperledger Fabric delivers a uniquely elastic and extensible architecture, distinguishing it from alternative blockchain solutions. Planning for the future of enterprise blockchain requires building on top of a fully-vetted, open source architecture; Hyperledger Fabric is your starting point. This project is an Active Hyperledger project. Hyperledger Fabric is a platform for distributed ledger solutions, underpinned by a modular architecture delivering high degrees of confidentiality, resiliency, flexibility and scalability. It is designed to support pluggable implementations of different components, and accommodate the complexity and intricacies that exist across the economic ecosystem. LEARN MORE >> Hyperledger Indy Blockchain solutions | DA This is the official SDK for Hyperledger Indy, which provides a distributed-ledger-based foundation for self-sovereign identity. Indy provides a software ecosystem for private, secure, and powerful identity, and the Indy SDK enables clients for it. The major artifact of the SDK is a C-callable library; there are also convenience wrappers for various programming languages and Indy CLI tool. All bugs, stories, and backlog for this project are managed through Hyperledger's Jira in project IS (note that regular Indy tickets are in the INDY project instead.) LEARN MORE >> Hyperledger BESU Blockchain solutions | DA Besu is an Apache 2.0 licensed, MainNet compatible, Ethereum client written in Java. LEARN MORE >> Hyperledger Sawtooth Blockchain solutions | DA Hyperledger Sawtooth is an enterprise solution for building, deploying, and running distributed ledgers (also called blockchains). It provides an extremely modular and flexible platform for implementing transaction-based updates to shared state between untrusted parties coordinated by consensus algorithms. LEARN MORE >> Hyperledger BURROW Blockchain solutions | DA Hyperledger Burrow is a permissioned Ethereum smart-contract blockchain node. It executes Ethereum EVM and WASM smart contract code (usually written in Solidity) on a permissioned virtual machine. Burrow provides transaction finality and high transaction throughput on a proof-of-stake Tendermint consensus engine. LEARN MORE >> Hyperledger IROHA Blockchain solutions | DA Iroha is a straightforward distributed ledger technology (DLT), inspired by Japanese Kaizen principle \u2014 eliminate excessiveness (muri). Iroha has essential functionality for your asset, information and identity management needs, at the same time being an efficient and trustworthy crash fault-tolerant tool for your enterprise needs. LEARN MORE >> Hyperledger ARIES Blockchain solutions | DA Hyperledger Aries allows trusted online peer-to-peer interactions based on decentralized identities and verifiable credentials. Aries includes a protocol definition, tools, and reference implementations. The Aries protocol supports identities rooted in a variety of distributed ledgers or blockchains. This approach to identity is often called Self Soverign Identity (SSI). LEARN MORE >> Hyperledger CACTUS Blockchain solutions | DA Hyperledger Cactus aims to provide Decentralized, Secure and Adaptable Integration between Blockchain Networks. Hyperledger Cactus is currently undergoing a major refactoring effort to enable the desired to-be architecture which will enable plug-in based collaborative development to increase the breadth of use cases & Ledgers supported. LEARN MORE >> Hyperledger CELLO Blockchain solutions | DA Hyperledger Cello is a blockchain provision and operation system, which helps manage blockchain networks in an efficient way. LEARN MORE >> Hyperledger CALIPER Blockchain solutions | DA Caliper is a blockchain performance benchmark framework, which allows users to test different blockchain solutions with predefined use cases, and get a set of performance test results. LEARN MORE >> DefectDojo Vulnerability management tool | S DefectDojo is a security program and vulnerability management tool. DefectDojo allows you to manage your application security program, maintain product and application information, triage vulnerabilities and push findings into defect trackers. LEARN MORE >> OWASP Zed Attack Proxy security tool | S The OWASP Zed Attack Proxy (ZAP) is one of the world\u2019s most popular free security tools and is actively maintained by a dedicated international team of volunteers. It can help you automatically find security vulnerabilities in your web applications while you are developing and testing your applications. It's also a great tool for experienced pentesters to use for manual security testing LEARN MORE >> BeEF Browser Exploitation Framework | S BeEF is short for The Browser Exploitation Framework. It is a penetration testing tool that focuses on the web browser. LEARN MORE >> OpenDXL Ontology Interoperable cybersecurity messaging | S The OpenDXL Ontology project is focused on the development of an open and interoperable cybersecurity messaging format for use with the OpenDXL messaging bus. LEARN MORE >> CS-Suite AWS infrastructure auditing tool | S CS Suite is a one stop tool for auditing the security posture of the AWS infrastructure and does system audits as well. CS Suite leverages current open source tools capabilities and has other missing checks added into one tool to rule them all. LEARN MORE >> STIX-shifter Python library | S STIX-shifter is an open source python library allowing software to connect to products that house data repositories by using STIX Patterning, and return results as STIX Observations LEARN MORE >> openscap SCAP document scanner | S The oscap program is a command line tool that allows users to load, scan, validate, edit, and export SCAP documents. LEARN MORE >> fuzzbench Fuzzing research evaluator | S FuzzBench is a free service that evaluates fuzzers on a wide variety of real-world benchmarks, at Google scale. The goal of FuzzBench is to make it painless to rigorously evaluate fuzzing research and make fuzzing research easier for the community to adopt. LEARN MORE >> ghidra Software reverse engineering (SRE) framework | S Ghidra is a software reverse engineering (SRE) framework created and maintained by the National Security Agency Research Directorate. This framework includes a suite of full-featured, high-end software analysis tools that enable users to analyze compiled code on a variety of platforms including Windows, macOS, and Linux. Capabilities include disassembly, assembly, decompilation, graphing, and scripting, along with hundreds of other features. LEARN MORE >> differential-privacy Repository tool | S This repository contains libraries to generate \u03b5- and (\u03b5, \u03b4)-differentially private statistics over datasets LEARN MORE >> Syncope Digital identity manager | S Apache Syncope is an Open Source system for managing digital identities in enterprise environments, implemented in Java EE technology and released under Apache 2.0 license. LEARN MORE >> pritunl-zero Authentication system | S Pritunl-Zero is a zero trust system that provides secure authenticated access to internal services from untrusted networks without the use of a VPN. LEARN MORE >> Pacu AWS exploitation framework | S Pacu is an open-source AWS exploitation framework, designed for offensive security testing against cloud environments. Created and maintained by Rhino Security Labs, Pacu allows penetration testers to exploit configuration flaws within an AWS account, using modules to easily expand its functionality. LEARN MORE >> Nmap Network scanner | S Nmap is released under a custom license, which is based on (but not compatible with) GPLv2. The Nmap license allows free usage by end users, and we also offer a commercial license for companies that wish to redistribute Nmap technology with their products. LEARN MORE >> TRASA Access control | S TRASA is a unified access control platform with identity-aware access proxy, privileged access management, two-factor authentication, device trust, and access policy features that enable secure remote access to Web, SSH, RDP, and Database services LEARN MORE >> Kestrel Web server | A Kestrel threat hunting language provides an abstraction for threat hunters to focus on what to hunt instead of how to hunt. The abstraction makes it possible to codify resuable hunting knowledge in a composable and sharable manner. LEARN MORE >> Snort Intrusion Prevention System | S Snort 3 is the next generation Snort IPS (Intrusion Prevention System). This file will show you what Snort++ has to offer and guide you through the steps from download to demo LEARN MORE >> CSET Security Evaluation Tool | S The Cyber Security Evaluation Tool (CSET\u00ae) is a Department of Homeland Security (DHS) product that assists organizations in protecting their key national cyber assets. It was developed by cybersecurity experts under the direction of CISA. The tool provides users with a systematic and repeatable approach to assessing the security posture of their cyber systems and networks LEARN MORE >> Malcolm Network analyzer | S Malcolm is a powerful network traffic analysis tool suite LEARN MORE >> CTI Repository tool | S This repository contains the MITRE ATT&CK\u00ae and CAPEC\u2122 datasets expressed in STIX 2.0. See USAGE or USAGE-CAPEC for information on using this content with python-stix2. LEARN MORE >> OSSEC Platform for monitor | S OSSEC is a full platform to monitor and control your systems. It mixes together all the aspects of HIDS (host-based intrusion detection), log monitoring and SIM/SIEM together in a simple, powerful and open source solution LEARN MORE >> Zeek Network tool | S A powerful framework for network traffic analysis and security monitoring. LEARN MORE >> Security Onion Solutions Security Onion maintainer | S Security Onion Solutions, LLC is the creator and maintainer of Security Onion, a free and open platform for threat hunting, network security monitoring, and log management. Security Onion includes best-of-breed free and open tools including Suricata, Zeek, Wazuh, the Elastic Stack and many others LEARN MORE >> OpenCTI Security threat manager | S OpenCTI is an open source platform allowing organizations to manage their cyber threat intelligence knowledge and observables. It has been created in order to structure, store, organize and visualize technical and non-technical information about cyber threats. LEARN MORE >> Croc File transfer | S croc is a tool that allows any two computers to simply and securely transfer files and folders. LEARN MORE >> Security Monkey AWS monitor | S Security Monkey monitors your AWS and GCP accounts for policy changes and alerts on insecure configurations. Support is available for OpenStack public and private clouds. Security Monkey can also watch and monitor your GitHub organizations, teams, and repositories. LEARN MORE >> Scorecard Automated analyzer | S Automate analysis and trust decisions on the security posture of open source projects. LEARN MORE >> Syft SBOM Generator | S A CLI tool and go library for generating a Software Bill of Materials (SBOM) from container images and filesystems. Exceptional for vulnerability detection when used with a scanner tool like Grype. LEARN MORE >> Grype Vulnerability scanner | S A vulnerability scanner for container images and filesystems. Easily install the binary to try it out. Works with Syft, the powerful SBOM (software bill of materials) tool for container images and filesystems. LEARN MORE >> Emmy Protocols Library | S Emmy is a library for building protocols/applications based on zero-knowledge proofs, for example anonymous credentials. Zero-knowledge proofs are client-server protocols (in crypto terms also prover-verifier, where the prover takes on the role of the client, and the verifier takes on the role of the server) where the client proves a knowledge of a secret without actually revealing the secret LEARN MORE >> Threat Dragon Threat modelling | S Threat Dragon is a free, open-source, cross-platform threat modelling application including system diagramming and a threat rule engine to auto-generate threats/mitigations. It is an OWASP Incubator Project and follows the values and principles of the threat modeling manifesto. The roadmap for the project is a simple UX, a powerful rule engine and integration with other development lifecycle tools. LEARN MORE >> Trivy Vulnerability scan | S Trivy (tri pronounced like trigger, vy pronounced like envy) is a simple and comprehensive scanner for vulnerabilities in container images, file systems, and Git repositories, as well as for configuration issues. Trivy detects vulnerabilities of OS packages (Alpine, RHEL, CentOS, etc.) and language-specific packages (Bundler, Composer, npm, yarn, etc.). In addition, Trivy scans Infrastructure as Code (IaC) files such as Terraform, Dockerfile and Kubernetes, to detect potential configuration issues that expose your deployments to the risk of attack. LEARN MORE >> OWASP Glue Framework for Security tools | S Glue is a framework for running a series of tools. Generally, it is intended as a backbone for automating a security analysis pipeline of tools. LEARN MORE >> ModSecurity Interface for ModSecurity Connectors | S Libmodsecurity is one component of the ModSecurity v3 project. The library codebase serves as an interface to ModSecurity Connectors taking in web traffic and applying traditional ModSecurity processing. In general, it provides the capability to load/interpret rules written in the ModSecurity SecRules format and apply them to HTTP content provided by your application via Connectors. LEARN MORE >> Archery Vulnerability assessment/management | S Archery is an opensource vulnerability assessment and management tool which helps developers and pentesters to perform scans and manage vulnerabilities. Archery uses popular opensource tools to perform comprehensive scanning for web application and network. It also performs web application dynamic authenticated scanning and covers the whole applications by using selenium. The developers can also utilize the tool for implementation of their DevOps CI/CD environment. LEARN MORE >> Trellis Trellis is an open source project and completely free to use. However, the amount of effort needed to maintain and develop new features and products within the Roots ecosystem is not sustainable without proper financial backing. LEARN MORE >> GitLab-foss GitLab FOSS is a read-only mirror of GitLab, with all proprietary code removed. This project was previously used to host GitLab Community Edition, but all development has now moved to https://gitlab.com/gitlab-org/gitlab. LEARN MORE >> GitLabhq GitLab CE Mirror | Please open new issues in our issue tracker on GitLab.com LEARN MORE >> Molecule Molecule project is designed to aid in the development and testing of Ansible roles. Molecule provides support for testing with multiple instances, operating systems and distributions, virtualization providers, test frameworks and testing scenarios. Molecule encourages an approach that results in consistently developed roles that are well-written, easily understood and maintained. LEARN MORE >> Server MariaDB was designed as a drop-in replacement of MySQL(R) with more features, new storage engines, fewer bugs, and better performance. MariaDB is brought to you by the MariaDB Foundation and the MariaDB Corporation. Please read the CREDITS file for details about the MariaDB Foundation, and who is developing MariaDB. MariaDB is developed by many of the original developers of MySQL who now work for the MariaDB Corporation, the MariaDB Foundation and by many people in the community. LEARN MORE >> Meta-ros As of Milestone 16 (2021-06-24), this branch can be used to build the releases current at the end of June 2021 of ROS 2 dashing, eloquent, foxy, galactic, and rolling and ROS 1 melodic and noetic with the honister OpenEmbedded release series. The original implementation of meta-ros for ROS 1 Indigo Igloo (https://github.com/bmwcarit/meta-ros) was transferred here on 2019-06-25. It has been converted to use recipes generated by superflore. LEARN MORE >> Lightning Lightning is a (TV) app development framework that offers great portability and performance. LEARN MORE >> Moodle Moodle - the world's open source learning platform Moodle https://moodle.org is a learning platform designed to provide educators, administrators and learners with a single robust, secure and integrated system to create personalised learning environments. You can download Moodle https://download.moodle.org and run it on your own web server, ask one of our Moodle Partners https://moodle.com/partners/ to assist you, or have a MoodleCloud site https://moodle.com/cloud/ set up for you. Moodle is widely used around the world by universities, schools, companies and all manner of organisations and individuals. LEARN MORE >> Odoo Odoo is a suite of web based open source business apps. The main Odoo Apps include an Open Source CRM, Website Builder, eCommerce, Warehouse Management, Project Management, Billing & Accounting, Point of Sale, Human Resources, Marketing, Manufacturing, ... Odoo Apps can be used as stand-alone applications, but they also integrate seamlessly so you get a full-featured Open Source ERP when you install several Apps. LEARN MORE >> KochiOrgBook (KOB) KochiOrgBook is a community initiative focused on building a digital ecosystem for the various associations in Kochi. LEARN MORE >> Jackhammer Jackhammer is a collaboration tool built with an aim of bridging the gap between Security team vs dev team, QA team and being a facilitator for TPM to understand and track the quality of the code going into production. It could do static code analysis and dynamic analysis with inbuilt vulnerability management capability. It finds security vulnerabilities in the target applications and it helps security teams to manage the chaos in this new age of continuous integration and continuous/multiple deployments. LEARN MORE >> Terminalizer Record your terminal and generate animated gif images or share a web player link terminalizer.com LEARN MORE >> Lycan Lycan is an implementation of the OpenC2 OASIS standard for command and control messaging. The current implementation is based on the Language Specification v1.0. Given the influence of STIX/CyBoX on OpenC2, this library is heavily based on the STIX 2 Python API internals. Property validation and object extension support aligns with STIX2 conventions and OpenC2 custom properties also support stix2 properties. LEARN MORE >> SWIG-WX SWIG reads annotated C/C++ header files and creates wrapper code (glue code) in order to make the corresponding C/C++ libraries available to the listed languages, or to extend C/C++ programs with a scripting language. LEARN MORE >> Shellinabox Shell In A Box implements a web server that can export arbitrary command line tools to a web based terminal emulator. This emulator is accessible to any JavaScript and CSS enabled web browser and does not require any additional browser plugins. LEARN MORE >> Osmedeus Osmedeus allows you automated run the collection of awesome tools to reconnaissance and vulnerability scanning against the target. LEARN MORE >> TKLDev TKLDev is the mother of all TurnKey apps. It's used to give birth to all TurnKey apps, including new versions of itself. It's designed to make simple things simple, and hard things possible. It's a self-contained build system that can be used to rapidly prototype and repeatably build any generic Debian-based Linux distribution or TurnKey GNU/Linux system from source. LEARN MORE >> Patton Patton is a set of tools for helping admins and security auditors to search for vulnerabilities in software components and computer systems. Patton contains, at this moment, the tools needed to analyze vulnerabilities on Ubuntu, Debian and RHEL 8 or newer systems and we are currently working on increasing the targets to include Python dependencies. Patton is an OWASP project: https://owasp.org/www-project-patton/ LEARN MORE >> PPM - PHP Process Manager PHP-PM is a process manager, supercharger and load balancer for PHP applications. It's based on ReactPHP and works best with applications that use request-response frameworks like Symfony's HTTPKernel. The approach of this is to kill the expensive bootstrap of PHP (declaring symbols, loading/parsing files) and the bootstrap of feature-rich frameworks. See Performance section for a quick hint. PHP-PM basically spawns several PHP instances as worker bootstraping your application (eg. the whole Symfony Kernel) and hold it in the memory to be prepared for every incoming request: This is why PHP-PM makes your application so fast. LEARN MORE >> phpcs-security-audit phpcs-security-audit is a set of PHP_CodeSniffer rules that finds vulnerabilities and weaknesses related to security in PHP code. It currently has core PHP rules as well as Drupal 7 specific rules. The tool also checks for CVE issues and security advisories related to the CMS/framework. This enables you to follow the versioning of components during static code analysis. LEARN MORE >> TurnKey Core TurnKey Core is the base operating system which all TurnKey GNU/Linux solutions share in common. It is commonly deployed standalone as a convenient starting point for custom system integrations. Benefits include automatic daily security updates, 1-click backup and restore, a web control panel, and preconfigured system monitoring with optional email alerts. LEARN MORE >> deployment The Software Assurance Marketplace (SWAMP) is a platform for running software assurance tools on your code. It is a joint effort of four research institutions -- the Morgridge Institute for Research, Indiana University, the University of Illinois at Urbana-Champaign, and the University of Wisconsin-Madison -- to advance the capabilities and increase the adoption of software assurance technologies through an open continuous assurance facility. LEARN MORE >> openc2-lycan-python Lycan is an implementation of the OpenC2 OASIS standard for command and control messaging. The current implementation is based on the Language Specification v1.0. Given the influence of STIX/CyBoX on OpenC2, this library is heavily based on the STIX 2 Python API internals. Property validation and object extension support aligns with STIX2 conventions and OpenC2 custom properties also support stix2 properties. LEARN MORE >> powerfulseal A powerful chaos engineering tool for Kubernetes clusters. PowerfulSeal injects failure into your Kubernetes clusters, so that you can detect problems as early as possible. It allows for writing scenarios describing complete chaos experiments. LEARN MORE >> mkdocs-material Material for MkDocs is a theme for MkDocs, a static site generator geared towards (technical) project documentation. If you're familiar with Python, you can install Material for MkDocs with pip, the Python package manager. If not, we recommended using docker. LEARN MORE >> ros_comm ROS communications-related packages, including core client libraries (roscpp, rospy, roslisp) and graph introspection tools (rostopic, rosnode, rosservice, rosparam). LEARN MORE >> emacs-secondmate An open-source, mini imitation of GitHub Copilot using EleutherAI GPT-Neo-2.7B (via Huggingface Model Hub) for Emacs. This is a much smaller model so will likely not be as effective as Copilot, but can still be interesting to play around with! LEARN MORE >> asciinema asciinema project is built of several complementary pieces: command-line based terminal session recorder, asciinema, website with an API at asciinema.org, javascript player When you run asciinema rec in your terminal the recording starts, capturing all output that is being printed to your terminal while you\u2019re issuing the shell commands. When the recording finishes (by hitting Ctrl-D or typing exit) then the captured output is uploaded to asciinema.org website and prepared for playback on the web. LEARN MORE >> ansistrano/deploy ansistrano.deploy and ansistrano.rollback are Ansible roles to easily manage the deployment process for scripting applications such as PHP, Python and Ruby. It's an Ansible port for Capistrano. LEARN MORE >> clara-copilot A alternative to Github Copilot for vscode until you get the access to github copilot LEARN MORE >> Lockdoor-Framework Lockdoor Framework : A Penetration Testing framework with Cyber Security Resources LEARN MORE >> switchboard-dapp Switchboard dApp is a revolutionary decentralized application that allows management of identities, assets, applications, services and access controls with DIDs(Decentralised Identifiers) and VCs(Verifiable Credentials) LEARN MORE >> iam-contracts This package consists of EVM smart contracts related to EnergyWeb IAM. This is an implementation of an ENS resolver that represents a role definition. It extends the ENS Public Resolver with additional resolver profiles, specifically for the use case of issuing and verify role claims using a smart contract. In other words, this custom ENS resolver allows some properties of a role definition to be (usefully) readable by another smart contract LEARN MORE >> iam-client-lib Identity and Access Management (IAM) Client Library: TypeScript library to be used within decentralized applications for authentication and authorization using DIDs (Decentralized Identifiers) and VCs (Verifiable Credentials) LEARN MORE >> passport-did-auth This repository consists of a Node.js Password Strategy which provides verification of the issuance of claims made regarding roles defined in an Ethereum Naming System (ENS). LEARN MORE >> meta-agl-demo The meta-agl-demo layer is the reference user interface layer for the DEMO platform of Automotive Grade Linux (AGL). The layer provides a reference platform and applications. The BitBake target name for the DEMO platform is agl-demo-platform, which is the full DEMO platform image. LEARN MORE >> meta-agl-devel The meta-agl-devel layer contains components that are being tested or still in development. The layer also contains software packages that Original Equipment Manufacturers (OEMs) need but are not included in the AGL software. LEARN MORE >> meta-agl The meta-agl layer provides the minimal set of software to boot an AGL Distribution system. You use this layer as the minimal core on which to build AGL profiles. NOTE: The meta-agl layer does not include a reference UI. The reference UI is included as part of the meta-agl-demo layer. LEARN MORE >> iam-cache-server Cache server for decentralised Identity and Access Management LEARN MORE >> skf-labs Here we find all the labs and write-ups for the security knowledge framework! These labs are correlated to knowledge-base id's which are on their place again correlated to security controls such as from the ASVS or NIST, etc. LEARN MORE >> skf-flask The OWASP Security Knowledge Framework is an open source web application that explains secure coding principles in multiple programming languages. The goal of OWASP-SKF is to help you learn and integrate security by design in your software development and build applications that are secure by design. OWASP-SKF does this through manageable software development projects with checklists (using OWASP-ASVS/OWASP-MASVS or custom security checklists) and labs to practice security verification (using SKF-Labs, OWASP Juice-shop, and best practice code examples from SKF and the OWASP-Cheatsheets). LEARN MORE >> primeng The Most Powerful Angular UI Component Library. PrimeNG is a rich set of open source native Angular UI components. LEARN MORE >> protocol-specifications The Most Powerful Angular UI Component Library. PrimeNG is a rich set of open source native Angular UI components.Beckn is an open protocol that allows local businesses across any industry to be discovered and engaged by any beckn-enabled application. Beckn protocol helps businesses co-create solutions for the masses seamlessly, by combining services of any form or provider. Beckn protocol is a collection of open specifications consisting of protocol APIs, message formats, network design and reference architectures to allow any two entities to execute commercial transactions without being on the same platform. LEARN MORE >> DevSecOps-MaturityModel From a startup to a multinational corporation the software development industry is currently dominated by agile frameworks and product teams and as part of it DevOps strategies. It has been observed that during the implementation, security aspects are usually neglected or are at least not sufficient taken account of. It is often the case that standard safety requirements of the production environment are not utilized or applied to the build pipeline in the continuous integration environment with containerization or concrete docker. Therefore, the docker registry is often not secured which might result in the theft of the entire company\u2019s source code. The OWASP DevSecOps Maturity Model provides opportunities to harden DevOps strategies and shows how these can be prioritized. LEARN MORE >> toit This repository contains the Toit language implementation. It is fully open source and consists of the compiler, virtual machine, and standard libraries that together enable Toit programs to run on an ESP32. LEARN MORE >> conjur A seamless open source interface to securely authenticate, control and audit non-human access across tools, applications, containers and cloud environments via robust secrets management. Conjur is designed to run in a Docker container(s), using Postgresql as the backing data store. It's easy to run both Conjur and Postgresql in Docker; see the demo directory for an example. LEARN MORE >> samm OWASP SAMM has moved to a new organization: https://github.com/owaspsamm. There you will now find both the core model as well as all derived projects. LEARN MORE >> windster-tailwind-dashboard Windster is a free and open-source Tailwind CSS admin dashboard layout featuring responsive sidebar layouts, authentication pages, charts, users, products pages and hundreds of Tailwind CSS components based on the Flowbite component library such as buttons, dropdowns, navbars, modals, datepickers, and more. LEARN MORE >> summon summon is a command-line tool to make working with secrets easier. It provides an interface for Reading a secrets.yml file Fetching secrets from a trusted store Exporting secret values to a sub-process environment LEARN MORE >> appflowy AppFlowy is an open-source alternative to Notion. You are in charge of your data and customizations. Built with Flutter and Rust. LEARN MORE >> augur Augur is a software suite for collecting and measuring structured data about free and open-source software (FOSS) communities. LEARN MORE >> Manticore Manticore is a symbolic execution tool for analysis of smart contracts and binaries. Features Program Exploration: Manticore can execute a program with symbolic inputs and explore all the possible states it can reach Input Generation: Manticore can automatically produce concrete inputs that result in a given program state Error Discovery: Manticore can detect crashes and other failure cases in binaries and smart contracts Instrumentation: Manticore provides fine-grained control of state exploration via event callbacks and instruction hooks Programmatic Interface: Manticore exposes programmatic access to its analysis engine via a Python API LEARN MORE >> Vulhub Vulhub is an open-source collection of pre-built vulnerable docker environments. No pre-existing knowledge of docker is required, just execute two simple commands and you have a vulnerable environment. LEARN MORE >> Plot Observable Plot is a JavaScript library for exploratory data visualization. Introduction Installing API Reference Changelog Contributing LEARN MORE >> clusterfuzz ClusterFuzz is a scalable fuzzing infrastructure that finds security and stability issues in software. Google uses ClusterFuzz to fuzz all Google products and as the fuzzing backend for OSS-Fuzz. ClusterFuzz provides many features which help seamlessly integrate fuzzing into a software project's development process: LEARN MORE >> llvm-project The LLVM project has multiple components. The core of the project is itself called \"LLVM\". This contains all of the tools, libraries, and header files needed to process intermediate representations and convert them into object files. Tools include an assembler, disassembler, bitcode analyzer, and bitcode optimizer. It also contains basic regression tests. LEARN MORE >> UTM UTM is a full featured system emulator and virtual machine host for iOS and macOS. It is based off of QEMU. In short, it allows you to run Windows, Linux, and more on your Mac, iPhone, and iPad. LEARN MORE >> openboxes OpenBoxes is an Open Source Inventory and Supply Chain Management System. The initial implementation of OpenBoxes will occur at Partners In Health-supported facilities in Haiti. LEARN MORE >> dkan DKAN is an open-source open-data platform inspired by CKAN (Comprehensive Knowledge Archive Network) and built on top of the very popular Drupal CMS (Content Management System). LEARN MORE >> openemr OpenEMR is a Free and Open Source electronic health records and medical practice management application. It features fully integrated electronic health records, practice management, scheduling, electronic billing, internationalization, free support, a vibrant community, and a whole lot more. It runs on Windows, Linux, Mac OS X, and many other platforms LEARN MORE >> php-src PHP is a popular general-purpose scripting language that is especially suited to web development. Fast, flexible and pragmatic, PHP powers everything from your blog to the most popular websites in the world. PHP is distributed under the PHP License v3.01. LEARN MORE >>","title":"Projects we track"},{"location":"bes-raise_issue/","text":"Process for raising an issue Before raising an issue the contributor should follow the listed steps: Issue should have an accepted RF number approved by the team. Issue should be raised in Be-Secure's issue section Must provide with snapshots if necessary Each issue should be tracked down and closed by the assignee . Recommended to mark checklist of the issue template before submitting","title":"Bes raise issue"},{"location":"bes-raise_issue/#process-for-raising-an-issue","text":"Before raising an issue the contributor should follow the listed steps: Issue should have an accepted RF number approved by the team. Issue should be raised in Be-Secure's issue section Must provide with snapshots if necessary Each issue should be tracked down and closed by the assignee . Recommended to mark checklist of the issue template before submitting","title":"Process for raising an issue"},{"location":"bes-raise_pull_request/","text":"Process to raise a pull request Pull request from developer's point of view It is recommended to create a new branch in developer's local github repository for working on new code changes/features . Once developer's code change has completed the developer should make a pull request to any other contributor's recommended branch to testing the code out based on the checklist . A developer is recommeded to follow the listed steps , for successful merge of their code pull requests. step 1: For avoiding future merge conflicts sync your master repository with Be-Secure/master. step 2: Sync you local master branch with remote branch master (recommended) step 3: create a new branch from synced master branch with assigned (optional eg: RF-xxxx ) step 4: Should work on the newly created branch mentioned in step 3 step 5: Once the work is done make a pull request from branch mentioned in step 3 to contributors specified branch. Pull request from code reviewer's point of view The contributor merges the isolated code change pull request to the local branch created specifically for this code review. and tests out the functionalty,do a thorough review based on the checklist provided by the team Be-Secure . Once the the contributor feels like the code is functional , and it satisfies the checklist they should provide a LGTM approval in the Be-Secure pull section . Only then the code gets merged to Be-Secure's github master repository . A code reviewer is recommeded to follow the listed steps , before providing LGTM approval. step 1: Merge the pull request to new_branch created specifically for testing the code changes in this pull request (new_branch should be synced with Be-Secure/master ) step 3: Once merged need to test it out by releasing a local version and install/test kob utility from the code reviewers local system. step 4: If the functionality is working as expected , do thorough code review based on checklist step 5: Finally if the code passes the checklist , give a LGTM approval other recommended steps: step : The title of the pull request should match the issue raised related to the same. step : The pull request template is to be filled in before submission, ensuring that it is linked back to the Github Issue number by replacing #XXX with the appropriate Issue reference. step : Each pull request should also be accompanied by a passing test(s) proving it's validity (where feasible).","title":"Bes raise pull request"},{"location":"bes-raise_pull_request/#process-to-raise-a-pull-request","text":"","title":"Process to raise a pull request"},{"location":"bes-raise_pull_request/#pull-request-from-developers-point-of-view","text":"It is recommended to create a new branch in developer's local github repository for working on new code changes/features . Once developer's code change has completed the developer should make a pull request to any other contributor's recommended branch to testing the code out based on the checklist . A developer is recommeded to follow the listed steps , for successful merge of their code pull requests. step 1: For avoiding future merge conflicts sync your master repository with Be-Secure/master. step 2: Sync you local master branch with remote branch master (recommended) step 3: create a new branch from synced master branch with assigned (optional eg: RF-xxxx ) step 4: Should work on the newly created branch mentioned in step 3 step 5: Once the work is done make a pull request from branch mentioned in step 3 to contributors specified branch.","title":"Pull request from developer's point of view"},{"location":"bes-raise_pull_request/#pull-request-from-code-reviewers-point-of-view","text":"The contributor merges the isolated code change pull request to the local branch created specifically for this code review. and tests out the functionalty,do a thorough review based on the checklist provided by the team Be-Secure . Once the the contributor feels like the code is functional , and it satisfies the checklist they should provide a LGTM approval in the Be-Secure pull section . Only then the code gets merged to Be-Secure's github master repository . A code reviewer is recommeded to follow the listed steps , before providing LGTM approval. step 1: Merge the pull request to new_branch created specifically for testing the code changes in this pull request (new_branch should be synced with Be-Secure/master ) step 3: Once merged need to test it out by releasing a local version and install/test kob utility from the code reviewers local system. step 4: If the functionality is working as expected , do thorough code review based on checklist step 5: Finally if the code passes the checklist , give a LGTM approval","title":"Pull request from code reviewer's point of view"},{"location":"bes-raise_pull_request/#other-recommended-steps","text":"step : The title of the pull request should match the issue raised related to the same. step : The pull request template is to be filled in before submission, ensuring that it is linked back to the Github Issue number by replacing #XXX with the appropriate Issue reference. step : Each pull request should also be accompanied by a passing test(s) proving it's validity (where feasible).","title":"other recommended steps:"},{"location":"bes-tech_stack/","text":"Be-Secure Open Source Security Tech Stacks: Open source is a vast technology space. We have frequent releases, bug fixes / patches being published very frequently. It is quite a tedious and time consuming effort for an organization to keep track of all changes that happen across the open source software landscape. Hence we have categorised open source technologies into five Be-Secure Open Source security tech stacks or blue prints to help the Be-Secure community navigate through security assessment of open source projects that are part of one of these categories. The open source projects are categorized based on purpose, interoperability and technology. They also include other open source dependencies that are frequently required to develop enterprise grade open source solutions. Be-Secure Open Source Security tech stacks are - DevOps [DO] : Be-Secure tech stacks to secure open source devops tools eg. Ansible, Puppet etc. Language and framework [L&F] : Be-Secure tech stacks to secure language and framework built on generic languages e.g. Ruby & Rails, PHP & Symphony, Python & Django, Javascript & Angular/Node etc. Application [A] : Be-Secure tech stacks for fully function open source applications like Drupal, magneto, odoo etc. Distributed & Decentralized Application [DA] : Be-Secure tech stacks for distributed and decentralized Distributed application, few e.g. are Blockchain frameworks like Hyperledger Indy, Hyperledger Fabric , Quorum etc. Open-source Security Tool [S] : Be-Secure tech stacks for open source security tools eg. ZAP, BeEF etc. DevOps Stack (DO) Language & Framework Stack (L&F) Application Stack (A) Distributed & Decentralized Application Stack (DA) Open Source Security Tool Stack (S) Prometheus - All, Tensorflow Espocrm Fabric ModSecurity DefectDojo Pykale Pimcore Indy-sdk Threat-dragon Hygieia Wagtail (Python-Django) Kaa Sawtooth Archery-sec Grafana Saleor (Python-Django) ROS Aries Anchore-engine Kafka Healthchecks (Python-Django) Canvas-android Caliper Clair RabbitMQ server Spring-security (Java-Spring) FarmOS Burrow Trivy Captain Stack Springfox (Java-Spring) Canvas-LMS Besu CS-suite Gpt-code-clippy Dispora (Ruby-Rails) Magento2 Iroha Alerta Each BeSecure tech stack will be associated with two types of BeSman environments namely the Development or Provisioning environment [Dev] as well as the security testing or security sandbox environment [Sec]. BeSecure Environment for Blue teams/Teaming This is an environment configured for an open source project, prebundled with the required security tools and dependencies that would permit the Blue team to validate application of security patches and confirm compliance to all defined security controls. BeSecure Environment for Red Teams/Teaming This is an environment configured for the Red team, prebundled with the required security tools and dependencies to conduct red teaming activities on an open source project with focus on unearthing vulnerabilities and exploits to compromise the security posture of the project. The Security assessment report of the tracked project will be updated under BeSLighthouse project.","title":"Tech stack"},{"location":"insiders/","text":"TBD","title":"Index"},{"location":"insiders/#tbd","text":"","title":"TBD"}]}